{
  "hash": "d12cebe1710974d63aaf30127cbd7657",
  "result": {
    "markdown": "# Introducción a la investigación operativa\n\n#io #book\n\n::: {#def-io}\n## Investigacion de operaciones\n\nLa Investigación de Operaciones es una disciplina que se ocupa del estudio y análisis de sistemas de producción y servicios. Su objetivo es encontrar las mejores soluciones posibles a los problemas que surgen en la toma de decisiones en dichos sistemas. La disciplina se originó durante la Segunda Guerra Mundial, cuando se necesitaba optimizar la producción de material bélico y mejorar la eficiencia logística. Desde entonces, ha tenido un papel importante en la mejora de la productividad y la eficiencia en diversos campos, como la manufactura, la ingeniería, la logística, la finanzas, la salud y la educación, entre otros:\n:::\n\nLa Investigación de Operaciones (IO) es un campo de la matemática y la informática que se dedica a la resolución de problemas prácticos mediante el uso de modelos matemáticos y algoritmos. Estos problemas pueden ser de diversa índole, tales como la optimización de recursos en una empresa, el diseño de un plan de producción eficiente, la gestión de inventarios, entre otros. La IO utiliza técnicas formales para analizar y resolver estos problemas de manera óptima y eficiente.\n\n## Técnicas y aplicaciones de la IO\n\nLa Investigación de operaciones (IO) es una disciplina que se ocupa del estudio y análisis de sistemas complejos y procesos de decisión en diversos contextos, con el objetivo de mejorar su eficiencia y efectividad. Para ello, se utilizan diversas técnicas y herramientas matemáticas y estadísticas. Algunas de las técnicas más comunes en la IO son:\n\n-   Programación lineal: permite optimizar una función objetivo, sujeta a un conjunto de restricciones, mediante el uso de técnicas de optimización matemática.\n-   Análisis de transporte: se utiliza para determinar la forma más eficiente de mover un producto o material desde un origen hasta un destino, minimizando costos de transporte.\n-   Programación dinámica: permite modelar y resolver problemas que involucran decisiones a lo largo del tiempo, considerando factores como el costo y la incertidumbre.\n-   Simulación: es una técnica que permite evaluar el comportamiento de un sistema o proceso a través de la repetición de escenarios hipotéticos.\n-   Teoría de colas: se utiliza para modelar y analizar sistemas de atención y espera, como por ejemplo, una fila de personas esperando ser atendidas en una institución bancaria.\n\nAlgunas de las aplicaciones de la IO son:\n\n-   Diseño y gestión de sistemas de producción y distribución.\n-   Diseño y optimización de sistemas de transporte y logística.\n-   Gestión de inventarios y suministros.\n-   Diseño y gestión de sistemas de atención y servicio al cliente.\n-   Gestión de proyectos y programas.\n-   Diseño y optimización de sistemas de información y tecnología.\n\n## Fundamentos de álgebra matricial\n\nLos fundamentos de álgebra matricial son un conjunto de conceptos y herramientas matemáticas que se utilizan para trabajar con matrices, es decir, arreglos de números dispuestos en filas y columnas. Algunos de los conceptos fundamentales de álgebra matricial son:\n\n-   Suma y resta de matrices: para sumar o restar dos matrices, deben tener la misma dimensión (es decir, el mismo número de filas y columnas). Se realiza elemento por elemento, es decir, se suman o restan los elementos correspondientes de cada matriz.\n\n-   Multiplicación de una matriz por un escalar: para multiplicar una matriz por un escalar (un número), se multiplican todos los elementos de la matriz por ese escalar.\n\n-   Multiplicación de matrices: para multiplicar dos matrices, deben cumplirse ciertas condiciones. La matriz resultante tendrá tantas filas como la primera matriz y tantas columnas como la segunda. El elemento ij-ésimo de la matriz resultante se obtiene multiplicando cada elemento de la i-ésima fila de la primera matriz por el elemento correspondiente de la j-ésima columna de la segunda matriz, y sumando todos esos productos.\n\n-   Transpuesta de una matriz: la transpuesta de una matriz A es una matriz A\\^T que se obtiene intercambiando filas por columnas en A.\n\n-   Matriz inversa: una matriz inversa es una matriz A\\^(-1) que, al multiplicarla por la matriz A original, da como resultado la matriz identidad.\n\n-   Determinante de una matriz: el determinante de una matriz es un número que se puede calcular a partir de los elementos de la matriz y que tiene ciertas propiedades. Por ejemplo, si el determinante de una matriz es cero, la matriz no tiene inversa.\n\n## Matriz inversa según el método de Gauss\n\nPara obtener la matriz inversa de una matriz A mediante el método de Gauss, se puede seguir el siguiente proceso:\n\n1.  Escribir la matriz A junto con la matriz identidad (I) de tamaño igual a la matriz A. Esto se conoce como la matriz aumentada (A\\|I).\n\n2.  Aplicar las operaciones elementales necesarias para convertir la matriz A en la matriz diagonal (en la que sólo hay elementos distintos de cero en la diagonal principal). Estas operaciones deben aplicarse también a la matriz identidad para mantener la relación entre ambas.\n\n3.  Una vez que se ha obtenido la matriz diagonal, se puede obtener la matriz inversa aplicando las mismas operaciones elementales a la matriz identidad, pero en orden inverso y con los coeficientes cambiados de signo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Para calcular la matriz inversa de una matriz A en R, puedes utilizar la \n# función solve() de la siguiente manera:\n# Primero, debes cargar la matriz A\n\nA <- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2)\n# A\n# Luego, puedes calcular la inversa de A utilizando solve()\n\nA_inv <- solve(A)\n# A_inv\n\n# También puedes utilizar la función ginv() del paquete MASS, que utiliza el \n# método de Moore-Penrose para calcular la inversa generalizada de una matriz:\n\n# Primero, debes cargar la matriz A y el paquete MASS\n\nA <- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2)\nlibrary(MASS)\n\n# Luego, puedes calcular la inversa de A utilizando ginv()\nA_inv <- ginv(A)\n```\n:::\n\n\n::: {#exm-ejemplo1}\nPara obtener la matriz inversa de A.\n\n\n```{=tex}\n\\begin{equation*}\nA_{2 \\times 2}=\n\\begin{pmatrix}\n1 & 2 \\\\\n3 & 4 \n\\end{pmatrix} _{2 \\times 2}\n\\end{equation*}\n```\n\nSe puede seguir el siguiente proceso:\n\nLa matriz aumentada es A\\|I =\n\n\n```{=tex}\n\\begin{equation*}\nA_{2 \\times 2}=\n\\begin{pmatrix}\n1 & 2 & 1 & 0 \\\\\n3 & 4 & 0 & 1 \n\\end{pmatrix} _{2 \\times 2}\n\\end{equation*}\n```\n\nAplicar una operación elemental de intercambio de filas para convertir el primer elemento de la matriz A en 1:\n\n\n```{=tex}\n\\begin{equation*}\nA_{2 \\times 2}=\n\\begin{pmatrix}\n3 & 4 & 0 & 1 \\\\\n1 & 2 & 1 & 0 \n\\end{pmatrix} _{2 \\times 2}\n\\end{equation*}\n```\n\nAplicar una operación elemental de multiplicación de fila por un escalar para que el primer elemento de la segunda fila sea -1:\n\n\n```{=tex}\n\\begin{equation*}\nA_{2 \\times 2}=\n\\begin{pmatrix}\n3 & 4 & 0 & 1 \\\\\n-1 & -2 & -1 & 0 \n\\end{pmatrix} _{2 \\times 2}\n\\end{equation*}\n```\n\nAplicar una operación elemental de suma de filas para eliminar el primer elemento de la segunda fila:\n\n\n```{=tex}\n\\begin{equation*}\nA_{2 \\times 2}=\n\\begin{pmatrix}\n3 & 4 & 0 & 1 \\\\\n0 & 0 & 0 & 1 \n\\end{pmatrix} _{2 \\times 2}\n\\end{equation*}\n```\n\nAplicar las operaciones elementales necesarias a la matriz identidad para obtener la matriz inversa:\n\n\n```{=tex}\n\\begin{equation*}\nA_{2 \\times 2}=\n\\begin{pmatrix}\n1/3 & -2/3 & 0 & -1/3 \\\\\n0 & 0 & 0 & 1 \n\\end{pmatrix} _{2 \\times 2}\n\\end{equation*}\n```\n\nPor tanto, la matriz inversa de A es:\n\n\n```{=tex}\n\\begin{equation*}\nA_{2 \\times 2}=\n\\begin{pmatrix}\n1/3 & -2/3 \\\\\n0 & 1 \n\\end{pmatrix} _{2 \\times 2}\n\\end{equation*}\n```\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}