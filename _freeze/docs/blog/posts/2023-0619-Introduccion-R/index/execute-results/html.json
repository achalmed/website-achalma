{
  "hash": "04c2bc2ae90d8a42b67ac538b1297b11",
  "result": {
    "markdown": "---\ntitle: Introducción a R en Linux\nsubtitle: Explo\ndescription: |\n  Descu\ncategories:\n  - R\ntags:\n  - R\ncitation: true\ndate: \"06/10/2023\"\n---\n\n\n# Descargando e instalando R y RStudio\n\nEn este artículo, te guiaré a través de los pasos para descargar e instalar R y RStudio en un sistema operativo Ubuntu Linux.\n\nPasos para la descarga e instalación de R y Rstudio:\n\n## Paso 1. Descargar R en Ubuntu Linux\n\nPara comenzar, necesitarás descargar el paquete de instalación de R desde el sitio web oficial de R. Abre tu navegador web y sigue este enlace: [Enlace de descarga de R](https://cloud.r-project.org/)\n\n> R es un lenguaje de programación ampliamente utilizado en la comunidad estadística y de análisis de datos, y es especialmente popular entre los científicos de datos y los investigadores.\n\n![](Screenshot_20230610_222900.png){#fig-}\n\n## Paso 2. Instalar R en Ubuntu Linux\n\nLos paquetes para la versión actual de R 4.2 están disponibles para la mayoría de las versiones estables de Ubuntu Desktop hasta su fecha oficial de fin de vida. Sin embargo, solo la última versión de Soporte a Largo Plazo (LTS) cuenta con soporte completo. A partir del 2 de mayo de 2022, las versiones compatibles son:\n\n-   Jammy Jellyfish (22.04, solo amd64)\n-   Impish Indri (21.10, solo amd64)\n-   Focal Fossa (20.04; LTS y solo amd64)\n-   Bionic Beaver (18.04; LTS)\n-   Xenial Xerus (16.04; LTS)\n\nEjecuta estas líneas (si eres `root`, omite `sudo`) para informar a Ubuntu sobre los binarios de R en CRAN.\n\n``` bash\n# Actualizar índices\nsudo apt update -qq\n# Instalar dos paquetes auxiliares necesarios\nsudo apt install --no-install-recommends software-properties-common dirmngr\n# Agregar la clave de firma (de Michael Rutter) para estos repositorios\n# Para verificar la clave, ejecuta: gpg --show-keys /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc \n# Huella digital: E298A3A825C0D65DFD57CBB651716619E084DAB9\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\n# Agregar el repositorio de R 4.0 de CRAN -- ajustar 'focal' a 'groovy' o 'bionic' según sea necesario\nsudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\"\n```\n\nAquí utilizamos `lsb_release -cs` para acceder a la versión de Ubuntu que estás utilizando: \"jammy\", \"impish\", \"focal\", \"bionic\", ...\n\nLuego, ejecuta\n\n``` bash\nsudo apt install --no-install-recommends r-base\n```\n\n## Obtén más de 5000 paquetes de CRAN\n\nEjecuta este comando (como `root` o agregando `sudo` como prefijo) para agregar el repositorio actual de R 4.0 o posterior 'c2d4u':\n\n``` bash\nsudo add-apt-repository ppa:c2d4u.team/c2d4u4.0+\n```\n\npara agregar el ID de clave de este repositorio, agregar el repositorio y actualizar el índice. Ahora puedes hacer `apt install --no-install-recommends r-cran-rstan` o `apt install --no-install-recommends r-cran-tidyverse` (nuevamente como usuario `root` o a través de `sudo`).\n\n## Paso 3. Descargar RStudio en Ubuntu Linux\n\nPuedes descargar la última versión de RStudio desde su sitio web oficial: [Enlace de descarga de RStudio](https://www.rstudio.com/products/rstudio/download/)\n\n> RStudio RStudio es un entorno de desarrollo integrado (IDE) muy popular para trabajar con R. Proporciona una interfaz gráfica intuitiva y muchas herramientas útiles para la programación en R.\n\n![](Screenshot_20230610_224818.png)\n\n## Paso 4. Instalar RStudio en Ubuntu Linux\n\n### Instalar dependencias\n\nAntes de instalar RStudio, es posible que debas instalar algunas dependencias en tu sistema. Abre la terminal y ejecuta los siguientes comandos para instalar las dependencias requeridas:\n\n``` bash\nsudo apt update\nsudo apt install gdebi-core\n```\n\nEstos comandos actualizarán los repositorios de paquetes y luego instalarán `gdebi-core`, una utilidad necesaria para instalar paquetes `.deb` de forma sencilla y resolver dependencias automáticamente.\n\n### Instalar RStudio\n\nUna vez que hayas descargado el archivo de instalación de RStudio y hayas instalado las dependencias necesarias, puedes proceder con la instalación. Ve al directorio donde descargaste el archivo de instalación y ejecuta el siguiente comando en la terminal:\n\n``` bash\nsudo gdebi <nombre_del_archivo_de_instalación>.deb\n```\n\nReemplaza `<nombre_del_archivo_de_instalación>` con el nombre real del archivo de instalación descargado.\n\nEl comando `gdebi` instalará RStudio y resolverá automáticamente las dependencias necesarias.\n\n## Paso 5. Iniciar RStudio\n\nUna vez completada la instalación, puedes iniciar RStudio desde el menú de aplicaciones de Ubuntu o ejecutando el siguiente comando en la terminal:\n\n``` bash\nrstudio\n```\n\nRStudio se abrirá en una ventana separada, lo que te permitirá comenzar a trabajar con R y aprovechar todas las funciones y características que ofrece el IDE.\n\n![](Screenshot_20230610_231407.png)\n\n# ¿Qúe nos ofrece RStudio?\n\n## Beneficios del software RStudio\n\nRStudio es una herramienta poderosa que brinda numerosas ventajas para los usuarios. A continuación, destacamos algunas de las funcionalidades que ofrece:\n\n1.  **Potente editor de código:** RStudio proporciona un entorno de desarrollo integrado (IDE) que cuenta con un editor de código robusto. Este editor permite escribir, editar y ejecutar código de manera eficiente, lo que facilita el trabajo con el lenguaje de programación R.\n\n2.  **Gestión del espacio de trabajo:** RStudio ofrece características avanzadas para el manejo del espacio de trabajo. Puedes explorar y administrar fácilmente los objetos, variables y funciones utilizados en tu sesión de R, lo que facilita el seguimiento y la organización de tus datos y resultados.\n\n3.  **Depuración y resaltado de sintaxis:** La función de depuración de RStudio te permite identificar y corregir errores en tu código de manera eficiente. Además, el resaltado de sintaxis te ayuda a visualizar y comprender mejor la estructura de tu código, lo que facilita su lectura y mantenimiento.\n\n4.  **Autocompletado inteligente:** RStudio ofrece una función de autocompletado inteligente, que te sugiere opciones de código a medida que escribes. Esto acelera el proceso de codificación al proporcionar sugerencias contextuales y facilitar la escritura correcta de las funciones y objetos de R.\n\n5.  **Interoperabilidad con otros software y plataformas:** RStudio es compatible con una amplia gama de herramientas y plataformas. Puedes integrar fácilmente tus análisis en flujos de trabajo existentes, colaborar con otros profesionales y compartir tus resultados en diferentes formatos, como informes, gráficos interactivos o aplicaciones web.\n\n![Interfaz de RStudio: Una poderosa herramienta para el desarrollo en R](Screenshot_20230610_233058.png)\n\n## Archivos de Script en R (.R)\n\nEn el mundo del análisis de datos y programación en R, los archivos de script (.R) desempeñan un papel fundamental. Estos archivos contienen la secuencia de comandos necesaria para realizar análisis y manipulación de datos de manera sistemática y reproducible.\n\n### Ventajas de utilizar archivos de script en R:\n\n1.  **Documentación de tareas**: Al escribir nuestros comandos en un archivo de script, estamos creando una documentación detallada de los pasos y procesos utilizados en nuestro análisis. Esto facilita la comprensión y revisión de nuestro trabajo, tanto para nosotros mismos como para otros colaboradores.\n\n2.  **Automatización de tareas repetitivas**: Los archivos de script permiten automatizar tareas que se repiten con frecuencia. Podemos definir una serie de comandos en el archivo y ejecutarlos de forma rápida y eficiente cada vez que sea necesario. Esto ahorra tiempo y reduce la posibilidad de errores humanos.\n\n3.  **Evaluación de cambios**: Al tener nuestros comandos en un archivo de script, podemos realizar modificaciones y ajustes en el análisis de manera más ágil. Podemos realizar pruebas y evaluaciones de los cambios sin necesidad de volver a escribir todo el código desde cero. Esto nos brinda flexibilidad y nos permite iterar y mejorar nuestro análisis de manera más eficiente.\n\n### Creando y Ejecutando un Script en RStudio\n\nLos scripts nos permiten escribir y ejecutar una serie de comandos de manera secuencial, lo que facilita la automatización y reproducción de tareas en nuestros análisis de datos.\n\n### Paso 1: Crear un nuevo archivo de script\n\nEn primer lugar, abrimos RStudio y creamos un nuevo archivo de script. Para hacer esto, seleccionamos \"Archivo\" en la barra de menú, luego \"Nuevo archivo\" y finalmente \"Script R\". Esto abrirá un nuevo editor de texto donde podemos escribir nuestro código.\n\n![](Screenshot_20230611_001234.png)\n\n![](Screenshot_20230611_001615.png)\n\n### Paso 2: Escribir el código en el script\n\nUna vez que tenemos nuestro archivo de script abierto, podemos comenzar a escribir nuestro código en R. Podemos utilizar cualquier comando o función de R en el script para realizar análisis de datos, manipulación de variables, visualización, entre otros. Es importante asegurarse de que el código esté escrito correctamente y tenga una sintaxis válida.\n\n![](Screenshot_20230611_004241.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Este es un ejemplo de un script básico en R\n\n# Comentario de una línea: los comentarios se utilizan para agregar notas o explicaciones al código\n\n# Variables\nnombre <- \"Juan\"  # Variable de tipo texto (cadena de caracteres)\nedad <- 25        # Variable numérica\n\n# Imprimir en la consola\ncat(\"Hola,\", nombre, \"tienes\", edad, \"años.\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHola, Juan tienes 25 años.\n```\n:::\n\n```{.r .cell-code}\n# Operaciones aritméticas\nsuma <- 10 + 5\nresta <- 10 - 5\nmultiplicacion <- 10 * 5\ndivision <- 10 / 5\n\n# Imprimir los resultados\ncat(\"La suma es:\", suma, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLa suma es: 15 \n```\n:::\n\n```{.r .cell-code}\ncat(\"La resta es:\", resta, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLa resta es: 5 \n```\n:::\n\n```{.r .cell-code}\ncat(\"La multiplicación es:\", multiplicacion, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLa multiplicación es: 50 \n```\n:::\n\n```{.r .cell-code}\ncat(\"La división es:\", division, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLa división es: 2 \n```\n:::\n\n```{.r .cell-code}\n# Estructuras de control\nif (edad >= 18) {\n  cat(\"Eres mayor de edad.\\n\")\n} else {\n  cat(\"Eres menor de edad.\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEres mayor de edad.\n```\n:::\n\n```{.r .cell-code}\n# Bucle for\nfor (i in 1:5) {\n  cat(\"Iteración:\", i, \"\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIteración: 1 \nIteración: 2 \nIteración: 3 \nIteración: 4 \nIteración: 5 \n```\n:::\n:::\n\n\n### Paso 3: Ejecutar el script\n\nUna vez que hemos escrito nuestro código en el archivo de script, podemos ejecutarlo para obtener los resultados deseados. Para hacer esto, podemos utilizar el atajo de teclado \"Ctrl + Enter\" o simplemente hacer clic en el botón \"Ejecutar\" en la parte superior del editor de texto.\n\n![](Screenshot_20230611_005354.png)\n\nRStudio ejecutará el código línea por línea y mostrará los resultados en la consola.\n\n![](Screenshot_20230611_010256.png)\n\n### Paso 4: Guardar el script\n\nEs importante guardar regularmente nuestro script para evitar perder nuestro trabajo. Para guardar el archivo de script, seleccionamos \"Archivo\" en la barra de menú y luego \"Guardar\" o \"Guardar como\".\n\n![](Screenshot_20230611_010854.png)\n\nPodemos elegir una ubicación y un nombre de archivo apropiados para guardar nuestro script.\n\n![](Screenshot_20230611_012736.png)\n\n![](Screenshot_20230611_013135.png)\n\n### Paso 5: Continuar escribiendo y ejecutando el código\n\nPodemos continuar escribiendo y ejecutando más código en nuestro script según nuestras necesidades. Podemos agregar nuevas líneas de código, modificar las existentes o eliminar las que ya no necesitamos. Es recomendable guardar el script regularmente a medida que realizamos cambios.\n\n### Paso 6: Exportar los resultados (opcional)\n\nSi deseamos guardar los resultados de nuestro análisis, podemos exportarlos a archivos o formatos específicos. Por ejemplo, podemos guardar tablas de datos en archivos CSV, gráficos en imágenes o informes en formatos de texto. Esto nos permite compartir y utilizar los resultados fuera de RStudio.\n\n> Recuerda que practicar y experimentar con diferentes comandos y funciones en RStudio te ayudará a familiarizarte con el entorno y mejorar tus habilidades de programación en R. ¡Diviértete explorando el mundo del análisis de datos con RStudio y sus potentes scripts!\n\n# Lo que debemos saber\n\n# Manipulación de datos",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}