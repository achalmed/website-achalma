{
  "hash": "6ecb4c00deddd88d8860bbba029272d3",
  "result": {
    "markdown": "---\ntitle: Quarto 1.3 Pre-release Notes\ndate: last-modified\nsearch: false\ncode-annotations: select\n---\n\n\n## Custom HTML Article Layout Widths\n\nStarting in Quarto v1.3, you may control the width of the sidebar, body, and margin columns of HTML page layouts using YAML or SCSS variables. The baseline width(s) that you provide will be used to calculate widths for the different responsives sizes and layouts using in HTML documents. To set these options in YAML, you may use:\n\n``` yml\nformat:\n  html: \n    grid:\n      sidebar-width: 300px\n      body-width: 900px\n      margin-width: 300px\n```\n\nSimilarly, in a custom theme `scss` file, you may set variables like:\n\n``` css\n// The left hand sidebar\n$grid-sidebar-width: 250px !default;\n\n// The main body\n$grid-body-width: 800px !default;\n\n// The right hand margin bar\n$grid-margin-width: 250px !default;\n\n// The gutter that appears between the above columns\n$grid-column-gutter-width: 1.5em !default;\n```\n\n## Mermaid diagram theming\n\nQuarto v1.3 updates Mermaid to version 9.2.2, and adds a number of theming options to diagram.\n\n### New default: mermaid follows Quarto's theme\n\nStarting in v1.3, Quarto will use the current theme's colors for Mermaid diagrams by default. If you use Quarto's bootswatch built-in themes (or a custom theme that uses the same SCSS variables), Mermaid diagrams in Quarto will automatically follow your project themes.\n\nThe SCSS variables used by the default Mermaid theme shipped with quarto, together with their default values, are:\n\n``` scss\n$mermaid-bg-color: $body-bg;\n$mermaid-edge-color: $secondary;\n$mermaid-node-fg-color: $body-color;\n$mermaid-fg-color: $body-color;\n$mermaid-fg-color--lighter: $body-color-lighter;\n$mermaid-fg-color--lightest: $body-color-lightest;\n$mermaid-font-family: $font-family-sans-serif;\n$mermaid-label-bg-color: $body-bg;\n$mermaid-label-fg-color: $primary;\n$mermaid-node-bg-color: $primary-transparent;\n$mermaid-node-fg-color: $primary;\n```\n\nThese have CSS variable counterparts that can also be overridden:\n\n``` css\n:root {\n  --mermaid-bg-color: #{$mermaid-bg-color};\n  --mermaid-edge-color: #{$mermaid-edge-color};\n  --mermaid-node-fg-color: #{$mermaid-node-fg-color};\n  --mermaid-fg-color: #{$mermaid-fg-color};\n  --mermaid-fg-color--lighter: #{$mermaid-fg-color--lighter};\n  --mermaid-fg-color--lightest: #{$mermaid-fg-color--lightest};\n  --mermaid-font-family: #{$mermaid-font-family};\n  --mermaid-label-bg-color: #{$mermaid-label-bg-color};\n  --mermaid-label-fg-color: #{$mermaid-label-fg-color};\n  --mermaid-node-bg-color: #{$mermaid-node-bg-color};\n  --mermaid-node-fg-color: #{$mermaid-node-fg-color};\n}\n```\n\n### Mermaid built-in themes\n\nIf you want to use Mermaid's own themes, you can do so by configuring the `mermaid` option in your YAML front matter:\n\n``` yml\nhtml:\n  mermaid:\n    theme: forest\n```\n\nThe available themes from mermaid are: `default`, `dark`, `forest`, and `neutral`.\n\n## `kbd` shortcode\n\nThe `kbd` shortcode can be used to describe keyboard shortcuts in documentation. On Javascript formats, it will attempt to detect the operating system of the format and show the correct shortcut. On print formats, it will print the keyboard shortcut information for all operating systems.\n\nMinimal example:\n\n``` md\nTo print, press {{{< kbd Shift-Ctrl-P >}}}. To open an existing new project, press {{{< kbd mac=Shift-Command-O win=Shift-Control-O linux=Shift-Ctrl-L >}}}.\n```\n\n## PDF Rendering Improvements\n\n### SVG Figure Support\n\nStarting in Quarto 1.3, we support rendering of PDF documents that include SVG files, automatically converting them to PDF images if `rsvg-convert` is available on the system path during rendering.\n\nYou can learn more about installing `libsvg` (which provides `rsvg-convert`), see <https://wiki.gnome.org/Projects/LibRsvg>. To install on specific platforms, follow the below instructions:\n\n-   On MacOS, you an use Homebrew (<https://formulae.brew.sh/formula/libsvg>) `brew install libsvg`\n\n-   Tarballs for Linux are available here: <https://download.gnome.org/sources/librsvg/>\n\n-   On Windows, you can install using chocolatey [https://community.chocolatey.org/packages/r...](https://community.chocolatey.org/packages/râ€¦){.uri} `choco install rsvg-convert`\n\n### Remote Image Reference Rendering\n\nStarting in Quarto 1.3, when rendering PDFs, Quarto will automatically fetch remote image references and properly embed them within the PDF.\n\n## Custom AST nodes for filtering\n\nQuarto now supports custom AST nodes in Pandoc filters. This allows more flexibility in defining and using Lua filters.\n\nWe will slowly roll out more extensive changes of the AST, but currently, the following objects are custom AST nodes:\n\n- [Callouts](custom-ast-nodes/callout.qmd)\n- [Tabsets](custom-ast-nodes/tabset.qmd)\n- [Conditional Blocks](custom-ast-nodes/conditional-block.qmd)\n\n### Example: Callouts in previous versions of Quarto\n\nIn previous versions of Quarto, callouts would be represented directly as a div with a class starting with `callout`, and the contents laid out in a [particular way](/docs/authoring/callouts.qmd).\n\nWhile _authoring_ documents, this syntax remains unchanged. But when processing the document, the callout divs are now represented as a custom AST node, which can be processed directly in Lua filters. In Quarto 1.3, callouts can be captured in Lua filters more directly. For example, here is a filter\nthat forces every callout to be of type \"caution\":\n\n```lua\nfunction Callout(callout)\n  -- do something with the callout\n  callout.type = \"caution\"\n\n  -- note that custom AST nodes are passed by reference. You can\n  -- return the value if you choose, but you do not need to.\nend\n```\n\nFinally, custom AST node constructors are available in the `quarto` object: `quarto.Callout`, `quarto.Tabset`, etc. See the pages above for details.\n\n\n\n## Code Annotation\n\nBoth display and executable code cells in Quarto may now include annotations, which will be formatted and displayed properly in any format, but with special formatting for HTML and PDF output. Annotations for a code cell consist of two related elements:\n\n1.  Special comments at the end of lines of code, which serve as the annotation markers.\\\n    Each annotated line should be terminated with a comment (using the code cell's language comment character) followed by a space and then an annotation number enclosed in angle brackets (e.g. `// <2>`). You may repeat an annotation number if the annotation spans multiple lines.\n2.  An ordered list that appears immediately after the code cell which includes the contents of each annotation. Each numbered item in the ordered list will correspond with the line of code(s) with the same annotation number.\n\nA very simple example is as follows:\n\n```` markdown\n```r\nfoo <- \"bar\"\nprint(\"Hello World!\") # <1>\n```\n1. Here, we print the string 'Hello World'\n````\n\nwhich will result in the following:\n\n::: panel-tabset\n## HTML\n\n![](images/annote-html.png)\n\n## PDF\n\n![](images/annote-pdf.png)\n\n## Docx\n\n![](images/annote-docx.png)\n:::\n\nWhen annotations are output for non-HTML and non-PDF formats, the annotation numbers will instead be replaced with a label pointing to the line of code (or lines of code) to which the annotation text applies.\n\n### HTML Annotation Styles\n\nFor HTML output, there are three options for the display style of annotations:\n\n`below`\n\n:   By default (or if `code-annotations: below` is specified), code annotation text will appear below the code cell.\n\n`hover`\n\n:   Code annotation text will be displayed when the user hovers over the annotation marker for a line of code.\n\n`select`\n\n:   Code annotation text will be displayed when the user clicks on an annotation marker (selecting it). The annotation text can be dismissed by clicking the annotation marker once again.\n\n### Complete Example\n\nThe following input document will produce annotated code as displayed below.\n\n```` markdown\n---\n...\ncode-annotations: select\n...\n---\n\n```{{r}}\nnum = 47 # <1>\nfactorial = 1\nif(num < 0) { # <2>\n  print(\"Sorry, factorial does not exist for negative numbers\")\n} else if(num == 0) {\n  print(\"The factorial of 0 is 1\")\n} else {\n  for(i in 1:num) {             # <3>\n    factorial = factorial * i   # <3>\n  }                             # <3>\n  print(paste(\"The factorial of\", num ,\"is\",format(factorial)))\n}\n```\n\n1. The number, this could instead be user input\n2. Check is the number is negative, positive or zero\n3. Actually compute the factorial\n````\n\n#### Example Output\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum = 47 # <1>\nfactorial = 1\nif(num < 0) { # <2>\n  print(\"Sorry, factorial does not exist for negative numbers\")\n} else if(num == 0) {\n  print(\"The factorial of 0 is 1\")\n} else {\n  for(i in 1:num) {             # <3>\n    factorial = factorial * i   # <3>\n  }                             # <3>\n  print(paste(\"The factorial of\", num ,\"is\",format(factorial)))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"The factorial of 47 is 2.586232e+59\"\n```\n:::\n:::\n\n\n1. The number, this could instead be user input\n2. Check is the number is negative, positive or zero\n3. Actually compute the factorial\n\n### Removing Annotations\n\nFor some formats, you may prefer to remove annotations. In this case, you can set `code-annotations: none`, which will remove the annotation comments for your code and suppress the output of the `OL` which contains the annotation text.\n\n### Disabling Code Annotation\n\nYou can disable code annotation by including the option `code-annotations: false` in your document. This will stop the processing of code annotations and leave your code (and `OL` as is).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}