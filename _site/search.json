[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Acerca de mí",
    "section": "",
    "text": "¡Hola! Mi nombre es Edison Achalma y te doy la bienvenida a mi página web personal. Permíteme compartir un poco sobre quién soy y qué me apasiona.\nSoy achalmaedison, estudiante de economía. A lo largo de mi trayectoria, he adquirido experiencia en programación y seguridad informtica. Estoy comprometido en la excelencia, el aprendizaje continuo, el impacto positivo y el respeto hacia los demás. Estos principios me guían en mi vida y en mi carrera, y me inspiran a alcanzar mis metas y contribuir al mundo de manera significativa.\nEn este sitio web, encontrarás información sobre mis intereses, habilidades y proyectos en los que he trabajado. Además, estaré compartiendo contenido relacionado con la economía, la filosofía, la matemática y la informática.\nMi objetivo principal es brindar información relevante y de calidad sobre temas que me apasionan y en los cuales tengo conocimientos sólidos con el fin de inspirar, educar y generar discusiones constructivas. Me apasiona la economía y la informática y estoy emocionado de poder compartir mi conocimiento y experiencias contigo.\nTe invito a explorar las diferentes secciones de mi página para conocer más sobre mis proyectos, publicaciones y logros. Si tienes alguna pregunta o te gustaría colaborar en algún proyecto, no dudes en contactarme a través de la sección de contacto.\n¡Espero que encuentres este sitio interesante y útil! ¡Gracias por visitar!\nAchalma Edison"
  },
  {
    "objectID": "about.html#acerca-de-mí",
    "href": "about.html#acerca-de-mí",
    "title": "Acerca de mí",
    "section": "",
    "text": "¡Hola! Mi nombre es Edison Achalma y te doy la bienvenida a mi página web personal. Permíteme compartir un poco sobre quién soy y qué me apasiona.\nSoy achalmaedison, estudiante de economía. A lo largo de mi trayectoria, he adquirido experiencia en programación y seguridad informtica. Estoy comprometido en la excelencia, el aprendizaje continuo, el impacto positivo y el respeto hacia los demás. Estos principios me guían en mi vida y en mi carrera, y me inspiran a alcanzar mis metas y contribuir al mundo de manera significativa.\nEn este sitio web, encontrarás información sobre mis intereses, habilidades y proyectos en los que he trabajado. Además, estaré compartiendo contenido relacionado con la economía, la filosofía, la matemática y la informática.\nMi objetivo principal es brindar información relevante y de calidad sobre temas que me apasionan y en los cuales tengo conocimientos sólidos con el fin de inspirar, educar y generar discusiones constructivas. Me apasiona la economía y la informática y estoy emocionado de poder compartir mi conocimiento y experiencias contigo.\nTe invito a explorar las diferentes secciones de mi página para conocer más sobre mis proyectos, publicaciones y logros. Si tienes alguna pregunta o te gustaría colaborar en algún proyecto, no dudes en contactarme a través de la sección de contacto.\n¡Espero que encuentres este sitio interesante y útil! ¡Gracias por visitar!\nAchalma Edison"
  },
  {
    "objectID": "about.html#contribuir",
    "href": "about.html#contribuir",
    "title": "Acerca de mí",
    "section": "Contribuir",
    "text": "Contribuir\nPuedes contribuir a Quarto de varias formas:\n\nAbriendo problemas para brindar comentarios y compartir ideas.\nEnviando solicitudes de extracción (PR) para solucionar problemas abiertos.\nEnviando solicitudes de extracción (PR) para sugerir nuevas características (se considera una buena práctica abrir un problema para discusión antes de trabajar en una solicitud de extracción para una nueva característica).\n\nPor favor, ten en cuenta nuestro código de conducta mientras interactúas con otros miembros de la comunidad.\n\nSolicitudes de extracción\n¡Las solicitudes de extracción son muy bienvenidas! Aquí te explicamos cómo contribuir mediante una solicitud de extracción (PR):\n\nHaz un fork del repositorio, clónalo localmente y realiza tus cambios en una nueva rama específica para la solicitud de extracción. Por ejemplo:\n\n\nTerminal\n\n# clone your fork\n$ git clone https://github.com/&lt;username&gt;/quarto-cli\n\n# configure for your platform (./configure.sh or ./configure.cmd for windows)\n$ cd quarto-cli\n$ ./configure.sh\n\n# checkout a new branch\n$ git checkout -b feature/newthing\n\nPara cambios significativos (por ejemplo, más que pequeñas correcciones de errores), asegúrate de haber firmado el acuerdo de contribución individual o corporativo según corresponda. Puedes enviar una copia firmada a jj@rstudio.com.\nEnvía la solicitud de extracción. Puedes enviarla como borrador si aún estás trabajando en ella pero deseas recibir comentarios. Siempre es bueno compartir abiertamente que estás trabajando en ello.\n\nHaremos todo lo posible para revisar y aceptar las solicitudes de extracción de manera oportuna."
  },
  {
    "objectID": "trademark.html",
    "href": "trademark.html",
    "title": "Trademark Policy",
    "section": "",
    "text": "This policy is adapted directly from the WordPress Foundation’s trademark policy for the WordPress and WordCamp names and logos. We admire the job that WordPress has done building a thriving open source community while at the same time making possible a wide variety of WordPress related businesses. We hope that this policy will help us do the same for Quarto."
  },
  {
    "objectID": "trademark.html#goals",
    "href": "trademark.html#goals",
    "title": "Trademark Policy",
    "section": "Goals",
    "text": "Goals\nPosit, PBC owns and oversees the trademark for the Quarto name and logo. We have developed this trademark usage policy with the following goals in mind:\n\nWe’d like to make it easy for anyone to use the Quarto name or logo for community-oriented efforts that help spread and improve Quarto.\nWe’d like to make it clear how Quarto-related businesses and projects can (and cannot) use the Quarto name and logo.\nWe’d like to make it hard for anyone to use the Quarto name and logo to unfairly profit from, trick or confuse people who are looking for official Quarto resources.\n\nPlease note that it is not the goal of this policy to limit open source or commercial activity around Quarto. We actively encourage Quarto-based open source projects and businesses—our goal with this policy is to prevent confusion about the source of Quarto related software and services."
  },
  {
    "objectID": "trademark.html#permission",
    "href": "trademark.html#permission",
    "title": "Trademark Policy",
    "section": "Permission",
    "text": "Permission\nPermission from Posit is required to use the Quarto name or logo as part of any project, product, service, domain name, or company name.\nWe will grant permission to use the Quarto name and logo for projects that meet the following criteria:\n\nThe primary purpose of your project is to promote the spread and improvement of the Quarto software.\nYour project is non-commercial in nature (it can make money to cover its costs or contribute to non-profit entities, but it cannot be run as a for-profit project or business).\nYour project neither promotes nor is associated with entities that currently fail to comply with the GPL license under which Quarto is distributed.\n\nIf your project meets these criteria, you will be permitted to use the Quarto name and logo to promote your project in any way you see fit with these exceptions: (1) Please do not use Quarto as part of a domain name; and (2) We do not allow the use of the trademark in advertising, including AdSense/AdWords.\nAll other Quarto-related businesses or projects can use the Quarto name and logo to refer to and explain their services, but they cannot use them as part of a product, project, service, domain name, or company name and they cannot use them in any way that suggests an affiliation with or endorsement by the Quarto open source project.\nThe abbreviation “QMD” is not covered by the Quarto trademark and you are free to use it in any way you see fit."
  },
  {
    "objectID": "trademark.html#examples",
    "href": "trademark.html#examples",
    "title": "Trademark Policy",
    "section": "Examples",
    "text": "Examples\nA consulting company can describe its business as “123 Publishing Services, offering Quarto consulting for publishers,” but cannot call its business “The Quarto Consulting Company.” Similarly, a business related to Quarto extensions can describe itself as “XYZ Extensions, the world’s best Quarto extensions,” but cannot call itself “The Quarto Extension Portal.”\nSimilarly, it’s OK to use the Quarto logo as part of a page that describes your products or services, but it is not OK to use it as part of your company or product logo or branding itself. Under no circumstances is it permitted to use Quarto as part of a domain name or top-level domain name.\nWhen in doubt about your use of the Quarto name or logo, please contact Posit at permissions@rstudio.com for clarification."
  },
  {
    "objectID": "license.html",
    "href": "license.html",
    "title": "Open Source License",
    "section": "",
    "text": "Quarto is open source software licensed under the GNU GPL v2. We believe that it’s better for everyone if the tools used for research and science are free and open. Reproducibility, widespread sharing of knowledge and techniques, and the leveling of the playing field by eliminating cost barriers are but a few of the shared benefits of free software in science.\nThe Quarto source code is available at https://github.com/quarto-dev/\nQuarto is a registered trademark of Posit. Please see our trademark policy for guidelines on usage of the Quarto trademark.\nQuarto also makes use of several other open-source projects, the distribution of which is subject to their respective licenses. Major components and their licenses include:\n\n\n\nProject\nLicense\n\n\n\n\nPandoc\nGNU GPL v2\n\n\nBootstrap 5.1\nMIT\n\n\nBootswatch 5.1\nMIT\n\n\nDeno\nMIT\n\n\nesbuild\nMIT\n\n\nDart Sass\nMIT\n\n\nObservable Runtime\nISC"
  },
  {
    "objectID": "bug-reports.html",
    "href": "bug-reports.html",
    "title": "Bug Reports",
    "section": "",
    "text": "We want to hear about Quarto bugs and, we want to fix those bugs! The following guidance will help us be as efficient as we can."
  },
  {
    "objectID": "bug-reports.html#formatting-make-githubs-markdown-work-for-us",
    "href": "bug-reports.html#formatting-make-githubs-markdown-work-for-us",
    "title": "Bug Reports",
    "section": "Formatting: Make GitHub’s markdown work for us",
    "text": "Formatting: Make GitHub’s markdown work for us\nThe easiest way to include a .qmd file in a comment is to wrap it in a code block. To make sure that GitHub doesn’t format your own .qmd, start and end your block with more backticks than you use in your .qmd file. In order to show .qmd files with three backticks (the most common case), use four backticks in your GitHub Issue:\n```\nThis is a code block\n```\nSometimes you might need more backticks:\n````\nThis is a four backticks block.\n\n```\nThis is a code block\n```\n````\n\nDon’t hold back: Tell us anything you think might make a difference\nAlthough we want the .qmd file to be small, we still can use as much information from you as you’re willing to share. Tell us all!, including:\n\nThe version of quarto you’re running\nThe operating system you’re running\nThe IDE you’re using, and its version\n\nIf you are seeing an error from Quarto, you can also provide additional diagnostic information by defining the QUARTO_PRINT_STACK environment variable.\nFor example on Unix:\nexport QUARTO_PRINT_STACK=true\nquarto render document.qmd\nor on Windows in a Powershell Terminal\n$ENV:QUARTO_PRINT_STACK=\"true\"\nquarto render document.qmd"
  },
  {
    "objectID": "docs/faq/rmarkdown.html",
    "href": "docs/faq/rmarkdown.html",
    "title": "FAQ for R Markdown Users",
    "section": "",
    "text": "What can I use Quarto for?\nQuarto® is an open-source scientific and technical publishing system built on Pandoc. You can weave together narrative text and code to produce elegantly formatted output as documents, web pages, blog posts, books and more. \n\n\nQuarto sounds similar to R Markdown. What is the difference and why create a new project?\nAt its core, Quarto works the same way as R Markdown: \n\nThe goal of Quarto is to make the process of creating and collaborating on scientific and technical documents dramatically better. Quarto combines the functionality of R Markdown, bookdown, distill, xaringian, etc into a single consistent system with “batteries included” that reflects everything we’ve learned from R Markdown over the past 10 years.\nThe number of languages and runtimes used for scientific discourse is very broad (and the Jupyter ecosystem in particular is extraordinarily popular). Quarto is at its core multi-language and multi-engine (supporting Knitr, Jupyter, and Observable today and potentially other engines tomorrow).\nOn the other hand, R Markdown is fundamentally tied to R which severely limits the number of practitioners it can benefit. Quarto is Posit’s attempt to bring R Markdown to everyone! Unlike R Markdown, Quarto doesn’t have a dependency or requirement for R. Quarto was developed to be multilingual, beginning with R, Python, Javascript, and Julia, with the idea that it will work even for languages that don’t yet exist.\nWhile it is a “new” system, it should also be noted that it is highly compatible with existing content: you can render most R Markdown documents and Jupyter notebooks unmodified with Quarto. The concept is to make a major, long term investment in reproducible research, while keeping it compatible with existing formats and adaptable to the various environments users work in.\n\n\nIs R Markdown going away? Will my R Markdown documents continue to work?\nR Markdown is not going away! R Markdown is used extensively and continues to work well. It will continue to be actively supported. We’re not leaving R Markdown, we’re expanding our scope. Over the years there have been many feature requests, and rather than implementing them all in R Markdown, for certain features we may refer you to Quarto. Everything that is currently in R Markdown will continue to work and be supported. There are no plans for deprecation.\nRead more about this in Yihui Xie’s blog post With Quarto Coming, is R Markdown Going Away? No.\n\n\nShould I switch from R Markdown to Quarto?\nIf you like using R Markdown, there’s no need to switch! R Markdown will continue to be supported and work as it always has been. You’re welcome to try Quarto if you like, but there’s no need to switch. Some new features may only exist in Quarto, so if you want to use those, then that’s where you would give those a try.  \nWe should emphasize that switching is not imperative. While we don’t plan on major feature initiatives in R Markdown and related packages, we are going to continue to maintain them (smaller improvements and bug fixes) for a long time to come. Furthermore, since Rmd files can in most cases be rendered without modification by Quarto, you can continue using R Markdown and the switching cost will still be minimal whenever you decide to do it. \n\n\nI use X (bookdown, blogdown, etc.). What is the Quarto equivalent?\nHere are the Quarto equivalents for various packages and features of the R Markdown ecosystem (in some cases Quarto equivalents are not yet available but will be later this year):\n\n\n\n\nFeature\nR Markdown\nQuarto\n\n\n\n\nBasic Formats\n\nhtml_document\npdf_document\nword_document\n\n\nhtml\npdf\ndocx\n\n\n\nBeamer\n\nbeamer_presentation\n\n\nbeamer\n\n\n\nPowerPoint\n\npowerpoint_presentation\n\n\npptx\n\n\n\nHTML Slides\n\nxaringan\nioslides\nrevealjs\n\n\nrevealjs\n\n\n\nAdvanced Layout\n\ntufte\ndistill\n\n\nQuarto Article Layout\n\n\n\nCross References\n\nhtml_document2\npdf_document2\nword_document2\n\n\nQuarto Crossrefs\n\n\n\nWebsites & Blogs\n\nblogdown\ndistill\n\n\nQuarto Websites\nQuarto Blogs\n\n\n\nBooks\n\nbookdown\n\n\nQuarto Books\n\n\n\nInteractivity\nShiny Documents\nQuarto Interactive Documents\n\n\nJournal Articles\nrticles\nQuarto Journal Articles\n\n\nPaged HTML\npagedown\nPlanned\n\n\nDashboards\nflexdashboard\nPlanned\n\n\nInteractive Tutorials\nlearnr\nNo equivalent planned\n\n\n\n\n\n\nCan you create custom formats for Quarto like you can for R Markdown?\nQuarto offers an Extension mechanism to add features to a format using Shortcodes or Filters but also create custom formats. A major difference with custom output format in R Markdown is that Quarto Extension does not use R but Lua, for example if you need to add some logic behind custom metadata fields. See Developing with Lua to get started if you need use it your extension. Some of the features from R Markdown custom formats like customizing knitting behavior can also now be done in YAML with execution options.\nAs example of custom formats for Quarto, Journal Articles for Quarto are port of some custom output format inside the rticles R package. Extensions lives in Quarto Journals Github organization, and you can find information on how to customize templates and manage Authors for you format.\nIf you are an advanced developer of R Markdown custom format, the Extension mechanism may still have limitation (like pre and post processor). The Extension feature in Quarto will be improved over time - do not hesitate to share with us your use case or wished in our Discussion Board.\n\n\nWhen would be a good time to start new projects in Quarto rather than R Markdown?\nQuarto v1.0 was announced at rstudio::conf(2022). This is the first stable release which is already an excellent foundation for starting new projects with Quarto or migrating existing R Markdown projects (if you are so inclined). If you start using Quarto, please do stay updated with latest release and changes as development is very active.\n\n\nDoes the RStudio IDE support Quarto?\nYes! You need to use RStudio v2022.07 or a later version, which includes support for editing and preview of Quarto documents.\nYou can download the latest release (v2023.03) of RStudio v2023.03 from https://posit.co/download/rstudio-desktop/.\n\n\nDoes Posit Connect support Quarto?\nYes! You can publish Quarto content to Posit Connect v2021.08.0 or later. Quarto has to be enabled as documented in the Posit Connect admin guide. Connect’s user documentation refers to Quarto.org docs on how to publish from the RStudio IDE. To publish Python-based Quarto content, you can use the rsconnect-python CLI from various locations, including VSCode, JupyterLab or the terminal."
  },
  {
    "objectID": "docs/faq/index.html",
    "href": "docs/faq/index.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you are an R Markdown user wondering about the relationship between Quarto and R Markdown, see also our FAQ for R Markdown Users.\n\nWhat can I use Quarto for?\nQuarto® is an open-source scientific and technical publishing system built on Pandoc. You can weave together narrative text and code to produce elegantly formatted output as documents, web pages, blog posts, books and more. \n\n\n\nHow do I install Quarto?\nVisit the Quarto.org Get Started page, which provides installation instructions for Windows, Mac OS, and Linux. \n\n\n\nIs Quarto free to use?\nYes! Quarto is open source with a GPL-2 license. You can use or disseminate it any way that you would any GPL-2 licensed open source software. \n\n\nWhat output formats can Quarto create?\nThere are many output formats available in Quarto. This includes all of the built in Pandoc formats (e.g. HTML, PDF, MS Word, Revealjs, ePub, etc.) as well as various ways to publish multiple documents (websites, blogs, and books). Learn more at Quarto Formats. \n\n\nWhat editing tools can I use with Quarto?\nYou can use a wide variety of tools with Quarto. We have provided documentation for writing and editing Quarto documents in VSCode, JupyterLab, RStudio IDE, or any text editor. Visit the Get Started with Quarto page to install, and then choose your tool for a brief introductory guide.\n\n\nCan I use Jupyter notebooks with Quarto?\nYes! Quarto can render Jupyter notebooks and you can use Jupyter, JupyterLab or any other .ipynb notebook editor with Quarto. You can render existing .ipynb notebooks as-is with Quarto, but adding Quarto-specific output options or a YAML header can enhance the output. Visit theJupyterLab page for more information.\n\n\nWhat programming languages are supported in Quarto?\nThe principal languages supported by Quarto are Python, R, Julia, and Observable JavaScript. Integration with Jupyter also enables the use of many other languages. \nEach Quarto document can be optionally processed by a computational engine (the engine can be manually specified or automatically detected based on the code chunks within). Current engines include Knitr (which is also used by R Markdown and supports a variety of languages including R, Python, and Julia, etc.) and Jupyter (which supports many languages including Python, Julia, and R). See the documentation on Engine Binding for additional details.\n\n\nWhat human languages are supported in Quarto?\nYou can write your Quarto documentation in your human language of choice. The lang document option is used to identify the main language of the document using IETF language tags (following the BCP 47 standard), such as en or en-GB. \n\n\nCan I use Quarto to develop proprietary content?\nYes! The copyright on Quarto does not cover the original content that you generate using Quarto. Using Quarto to create original content does not place any restrictions, legally, on the license that you choose for the original content that you create, nor does it “reach through” to affect software that you might be writing documentation for with Quarto.\n\n\nBut doesn’t the GPL cover exported HTML documents when they include styles or functionalities from Quarto?\nIt covers the styles or functionalities themselves. It does not cover your original content because your original content is not a derivative work of the Quarto styles or functionalities.\n\n\nHow can I share documents and have people comment on them?\nYou can publish Quarto content to various locations. See the user guides for publishing for details on using Quarto Pub, GitHub Pages, Netlify, Posit Connect, and other services with Quarto. Once documents are published you can use  hypothes.is, Utterances, or Giscus for commenting. Learn more in the documentation on commenting.\n\n\nCan I do collaborative editing with Quarto?\nThere is not yet anything specific for collaborative editing in Quarto. You can collaborate on .qmd files in the same way you currently do for any text or code files. \nPosit Workbench allows for Project Sharing for interactive editing and collaboration on the same document.\n\n\nWhere can I publish Quarto websites?\nThere are a wide variety of ways to publish Quarto websites. Website content is by default written to the \\_site sub-directory (you can customize this using the output-dir option). Publishing is simply a matter of copying the output directory to a web server or web hosting service.\nThe publishing documentation describes several convenient options for Quarto website deployment including Posit Connect, Netlify, GitHub Pages, Firebase, Site44, and Amazon S3. We’ll mostly defer to the documentation provided by those various services, but will note any Quarto website specific configuration required.\n\n\nDoes Posit Connect support Quarto?\nYes! You can publish Quarto content to Posit Connect v2021.08.0 or later. Quarto has to be enabled as documented in the Posit Connect admin guide. Connect’s user documentation refers to Quarto.org docs on how to publish from the RStudio IDE. To publish Python-based Quarto content, you can use the rsconnect-python CLI from various locations, including VSCode, JupyterLab or the terminal.\n\n\nWho are the developers of Quarto?\nDevelopment of Quarto is sponsored by Posit, PBC. The same core team works on both Quarto and R Markdown:\n\nCarlos Scheidegger (@cscheid)\nCharles Teague (@dragonstyle)\nChristophe Dervieux (@cderv)\nJ.J. Allaire (@jjallaire)\nYihui Xie (@yihui)\n\nHere is the full contributors list. Quarto is open source and we welcome contributions in our github repository as well! https://github.com/quarto-dev/quarto-cli.\n\n\nWhy the name Quarto?\nWe wanted to use a name that had meaning in the history of publishing and landed on Quarto, which is the format of a book or pamphlet produced from full sheets printed with eight pages of text, four to a side, then folded twice to produce four leaves. The earliest known European printed book is a Quarto, the Sibyllenbuch, believed to have been printed by Johannes Gutenberg in 1452–53.\n\n\nWhere can I report bugs or request features?\nThanks for finding something and sharing with us! You can file an issue in the Quarto repository https://github.com/quarto-dev/quarto-cli/issues.\n\n\nWhere can I ask questions and discuss using Quarto with others?\nThe best place to ask questions and see what questions other people have is in Quarto discussions (https://github.com/quarto-dev/quarto-cli/discussions)."
  },
  {
    "objectID": "docs/troubleshooting/index.html",
    "href": "docs/troubleshooting/index.html",
    "title": "Troubleshooting",
    "section": "",
    "text": "This page documents a number of strategies you can employ in case you run into problems with Quarto. As always, we welcome feedback and bug reports on the Quarto issue tracker, but this page might help you get up and running quickly."
  },
  {
    "objectID": "docs/troubleshooting/index.html#basics",
    "href": "docs/troubleshooting/index.html#basics",
    "title": "Troubleshooting",
    "section": "Basics",
    "text": "Basics\n\nCheck the version of quarto and its dependencies\nYou can check the version of Quarto and its dependencies by running quarto check. Here’s an example of the output it generates:\n[✓] Checking versions of quarto binary dependencies...\n      Pandoc version 2.19.2: OK\n      Dart Sass version 1.32.8: OK\n[✓] Checking versions of quarto dependencies......OK\n[✓] Checking Quarto installation......OK\n      Version: 1.2.313\n      Path: /Users/cscheid/repos/github/quarto-dev/quarto-cli/package/dist/bin\n\n[✓] Checking basic markdown render....OK\n\n[✓] Checking Python 3 installation....OK\n      Version: 3.10.9\n      Path: /Users/cscheid/virtualenvs/homebrew-python3/bin/python3\n      Jupyter: 5.1.3\n      Kernels: python3, julia-1.6, julia-1.8\n\n[✓] Checking Jupyter engine render....OK\n\n[✓] Checking R installation...........OK\n      Version: 4.2.2\n      Path: /Library/Frameworks/R.framework/Resources\n      LibPaths:\n        - /Users/cscheid/repos/github/quarto-dev/quarto-web/renv/library/R-4.2/aarch64-apple-darwin20\n        - /private/var/folders/nm/m64n9_z9307305n0xtzpp54m0000gn/T/RtmpXmQfZA/renv-system-library\n      rmarkdown: 2.14\n\n[✓] Checking Knitr engine render......OK\n\n\nGet a stack trace\nSetting QUARTO_PRINT_STACK=true in your environment will cause Quarto to print a stack trace when an error occurs.\n\nWindowsUnix\n\n\nOn PowerShell:\n$env:QUARTO_PRINT_STACK = \"true\"\n\n\nOn bash-like shells:\nexport QUARTO_PRINT_STACK=true\n\n\n\n\n\nVerbose mode\nQuarto will print more information about its internal state if you set QUARTO_LOG_LEVEL=DEBUG in your environment.\n\n\nInspect log files\nQuarto creates log files that can help you diagnose problems. These are stored in different locations depending on your operating system:\n\nWindowsmacOSLinux\n\n\n%LOCALAPPDATA%\\quarto\\logs\n\n\n${HOME}/Library/Application Support/quarto/logs\n\n\nIf $XDG_DATA_HOME is set, ${XDG_DATA_HOME}/.local/share/quarto/logs, otherwise ${HOME}/.local/share/quarto/logs\n\n\n\n\n\nOut-of-memory issues\nWhen building a large project or website, you might run into memory limits. In that case, consider the following environment variable.\nIn this example, we’re setting the maximum amount of memory to be allocated by Deno to be 8GB. Adjust this to your computer’s limits.\n\nWindowsUnix\n\n\nOn PowerShell:\n$env:QUARTO_DENO_EXTRA_OPTIONS = \"--v8-flags=--max-old-space-size=8192\"\n\n\nOn bash-like shells:\nexport QUARTO_DENO_EXTRA_OPTIONS=--v8-flags=--max-old-space-size=8192\n\n\n\n\n\nInstaller issues\n\nmacOS\n\n\nIn macOS, installers write their output to /var/log/install.log. Inspecting this file might offer hints to what went wrong.\n\n\n\n\n\n\nWarning\n\n\n\nIf you’re going to ask for help on public forums, be aware that every macOS installer writes to the same file /var/log/install.log. You should make sure you’re not accidentally disclosing installation information you would rather not.\n\n\n\n\n\n\n\nPDF/LaTeX issues\nIf quarto finds an existing installation of texlive in your system, it will use that. If you’re seeing issues with rendering to PDF, make sure you have an up-to-date installation of texlive. Alternatively, you can have quarto use its own version, by calling quarto install tinytex."
  },
  {
    "objectID": "docs/troubleshooting/index.html#environment-libraries-and-dependencies",
    "href": "docs/troubleshooting/index.html#environment-libraries-and-dependencies",
    "title": "Troubleshooting",
    "section": "Environment, Libraries, and Dependencies",
    "text": "Environment, Libraries, and Dependencies\nOne common source of tricky problems is the presence of multiple installations of R and Python in a system. Quarto will attempt to find an R or Python installation, and sometimes your shell environment is pointing to a different one.\n\nknitr\nIf you suspect that quarto is finding the wrong version of an R installation, you can obtain information about the R installation that Quarto sees by running the following .qmd file:\n---\nengine: knitr\n---\n\n```{r}\nsessionInfo()\nSys.getenv()\n.libPaths()\n\n# If the sessioninfo package is available, \n# it provides output that is easier to read,\n# and can write its results to a file\nsessioninfo:::session_info(to_file = \"quarto-session-info-output.txt\")\n```\nYou can then also run those commands from your R environment, and compare the output. If sessioninfo is available, then you can ask for a difference between the outputs more directly:\nsessioninfo:::session_diff(new = \"quarto-session-info-output.txt\")"
  },
  {
    "objectID": "docs/troubleshooting/index.html#advanced",
    "href": "docs/troubleshooting/index.html#advanced",
    "title": "Troubleshooting",
    "section": "Advanced",
    "text": "Advanced\n\nDebugging Jupyter engine issues\nTo enable Jupyter debugging, add the following to your YAML front matter:\nexecute:\n  debug: true\nQuarto creates a log of the execution of jupyter notebooks in its log directory under jupyter-kernel.log.\nIf Jupyter execution is hanging instead of failing, you can force immediate flushing of the log by setting QUARTO_JUPYTER_FLUSH_LOGS=true in your environment before running quarto.\n\n\nDebugging Lua filters\n\nUseful Lua helper functions\nQuarto includes a number of useful Lua helper functions that can be used to debug Lua filters. These are available in the quarto module, and can be used as follows:\nquarto.log.output(obj) -- prints a potentially complex object to the console\n\n\nFilter tracing\nSetting QUARTO_TRACE_FILTERS=true in your environment will cause Quarto to produce a trace of the Lua filters it runs. This will be a file written to the directory in which quarto runs, named quarto-filter-trace.json. We include an HTML page that can be used to visualize this trace, which you can find in the quarto-cli repository at package/src/common/trace-viewer/index.html. Open this page in your browser and provide the path to the JSON file as the URL parameter file (eg. index.html?file=quarto-filter-trace.json), and you’ll see a report of the changes produced by each part of the filter chain."
  },
  {
    "objectID": "docs/visual-editor/content.html",
    "href": "docs/visual-editor/content.html",
    "title": "Content Editing",
    "section": "",
    "text": "Visual mode supports editing all of Pandoc markdown. Standard formatting commands (headings, bold, italic, etc.) work just the way they do in a conventional word processor.\nSee the Using the Editor section for more details on how to access core editing commands. Note also that you can access all editing commands via keyboard shortcuts.\nEditing of links, images, blockquotes, lists, tables, etc. is also available, as is the ability to specify Pandoc attributes and insert special characters and emojis."
  },
  {
    "objectID": "docs/visual-editor/content.html#editing-tables",
    "href": "docs/visual-editor/content.html#editing-tables",
    "title": "Content Editing",
    "section": "Editing Tables",
    "text": "Editing Tables\nYou can insert a table using the Table menu. You can then use either the main menu or a context menu to insert and delete table rows and columns:\n\nNote that if you select multiple rows or columns the insert or delete command will behave accordingly. For example, to insert 2 rows, first select 2 rows then use the insert command.\nWhen you make a selection of multiple rows and/or columns as illustrated above, you can also copy and paste groups of cells within the table."
  },
  {
    "objectID": "docs/visual-editor/content.html#editing-lists",
    "href": "docs/visual-editor/content.html#editing-lists",
    "title": "Content Editing",
    "section": "Editing Lists",
    "text": "Editing Lists\nAs described above, you can create a new list by just typing - or 1. at the beginning of an empty paragraph. To add items to the list, just press Enter within a list item. To exit the list, press Enter within an empty list item.\nWhile this covers many simple list editing tasks, there is a variety of other actions you may want to take within lists, including creating nested lists and adding paragraphs or code blocks to an exiting list item. From an empty list item (pictured at left), the following keyboard gestures can be used to do this:\n\n\n\n\n\n\n\n\nEmpty Item (enter to exit list)\nTab (add sublist)\nBackspace  (add block)\n\n\n\n\n\n\n\n\n\n\nYou can also use Shift+Tab to lift a list item into the previous level.\n\nTight Lists\nMarkdown distinguishes between normal and tight lists, where tight lists have less vertical spacing between items. In markdown source code, you designate a tight list by having no empty lines between your list items.\nVisual mode creates normal lists by default (you can change this behavior via Editor Options). You can toggle between normal and tight lists using the ⌥⌘ 9 keyboard shortcut. You can also change the list type using the Format -&gt; Edit Attributes dialog (also accessible via the F4 shortcut). If you have existing tight lists in your markdown source files, they will remain so within the visual editor."
  },
  {
    "objectID": "docs/visual-editor/content.html#pandoc-attributes",
    "href": "docs/visual-editor/content.html#pandoc-attributes",
    "title": "Content Editing",
    "section": "Pandoc Attributes",
    "text": "Pandoc Attributes\nSeveral of Pandoc’s block types (e.g. headings, code blocks, and divs) enable you to specify a set of custom attributes. Attributes include IDs and class names, as well as arbitrary key-value pairs that are passed through to output formats (e.g. as attributes for HTML tags). For these block types, an edit button will appear at the the top right when your cursor is within the block:\n\nNote that any ID as well as the first class specified within the attributes are also displayed. Click the edit button or use the F4 keyboard shortcut to edit the attributes."
  },
  {
    "objectID": "docs/visual-editor/content.html#special-characters",
    "href": "docs/visual-editor/content.html#special-characters",
    "title": "Content Editing",
    "section": "Special Characters",
    "text": "Special Characters\n\nHard Line Breaks\nYou can insert a hard line break using the Insert -&gt; Special Characters -&gt; Hard Line Break command or via the ⇧ Enter keyboard shortcut.\n\n\nNon-Breaking Spaces\nYou can insert a non-breaking space using the Insert -&gt; Special Characters -&gt; Non-Breaking Space command or via the ⌃ Space keyboard shortcut. Non-breaking spaces are displayed with an alternate background color to distinguish them from normal spaces.\nA markdown non-breaking space will result in the &nbsp; character within HTML output and a ~ character within LaTeX output.\n\n\nEmojis\nTo insert an emoji, you can use either the Insert menu or the requisite markdown shortcut plus auto-complete:\n\n\n\n\n\n\n\nInsert -&gt; Special Characters -&gt; Emoji…\nMarkdown Shortcut\n\n\n\n\n\n\n\n\n\nFor markdown formats that support text representations of emojis (e.g. :grinning:), the text version will be written. For other formats the literal emoji character will be written. Currently, the gfm and hugo (with enableEmoji = true in the site config) formats both support text representation of emojis.\nIf you want to add support for markdown emoji output to another Quarto format, you can add the emoji extension to the from option in document metadata. For example:\n---\ntitle: \"My Document\"\nfrom: markdown+emoji\n---\n\n\nUnicode Symbols\nTo insert an arbitrary Unicode character, use Insert -&gt; Special Characters -&gt; Unicode…:\n\nYou can search for characters either by name or by entering an explicit Unicode code point (e.g. “U+0420”).\n\n\nSmart Punctuation\nWhen the Pandoc smart extension is enabled (which it is by default), straight quotes are interpreted as curly quotes, --- as em-dashes, -- as en-dashes, and ... as ellipses. In addition, non-breaking spaces are inserted after certain abbreviations, such as “Mr.”\nVisual mode supports these same transformations (so when you type --- it becomes an em-dash). If you didn’t intend for this transformation to occur just hit backspace and it will be reverted."
  },
  {
    "objectID": "docs/visual-editor/content.html#spell-checking",
    "href": "docs/visual-editor/content.html#spell-checking",
    "title": "Content Editing",
    "section": "Spell-Checking",
    "text": "Spell-Checking\nWhen RStudio real time spell-checking is enabled (you can do this using Spelling preferences), misspelled words will be underlined as you type:\n\nTo resolve a spelling error, right-click on the misspelled word, then either choose an alternate spelling, ignore the word (which applies to the current document only), or add the word to your user dictionary (which applies to all documents).\nIf you ignore a word by mistake, right-click it again to unignore it. If you want to edit your personal dictionary, use the Edit User Dictionary… button located within Spelling preferences."
  },
  {
    "objectID": "docs/visual-editor/content.html#commenting",
    "href": "docs/visual-editor/content.html#commenting",
    "title": "Content Editing",
    "section": "Commenting",
    "text": "Commenting\nWhen reviewing a document you often want to provide inline comments with suggested revisions. This is possible in Quarto using HTML comments (which are ignored by all output formats). Visual mode includes a command for inserting HTML comments as well as special highlighting treatment to easily parse out editing comments from surrounding text.\n\nNote that the # prefix used in the comment is what triggers the special background highlighting. If you remove the # it will still be a valid HTML comment, but just won’t be highlighted as shown above.\nYou can insert an HTML comment using the Comment button on the toolbar or via the ⇧⌘ C keyboard shortcut. Remember, HTML comments won’t show up in rendered output so they are ideal both for review but also for leaving yourself to-do notes within a document."
  },
  {
    "objectID": "docs/visual-editor/content.html#css-styles",
    "href": "docs/visual-editor/content.html#css-styles",
    "title": "Content Editing",
    "section": "CSS Styles",
    "text": "CSS Styles\nOne of the benefits of authoring with markdown is that your content can be easily published to a wide variety of formats. This is possible in significant measure because of the limitations that markdown imposes: you author in terms of the structure and semantics of your content, rather than worrying about specifically how things will appear.\nSometimes however you know that you’ll be publishing to HTML, and you want to exert more control over how things look. In this case, you can use CSS (Cascading Style Sheets) along with markdown to do custom formatting. This section covers how to:\n\nDefine CSS styles for your document; and\nApply those styles to entities within your document.\n\nIf you are new to CSS, you may want to brush up on the basics before proceeding.\n\n\n\n\n\n\nCSS styles apply only to HTML output, and will not have any impact on the formatting of other output types like PDF or MS Word.\n\n\n\n\nDefining Styles\nThe best way to include CSS styles is to create an external stylesheet (e.g. styles.css), then include it within the output options of your document. For example:\n---\ntitle: \"CSS Demo\"\nformat:\n  html:\n    css: styles.css\n---\nThe styles.css file might look something like this:\n.important {\n  color: maroon;\n}\n\n.illustration {\n  border: 1px solid rgb(230, 230, 230); \n}\nNote that it’s also possible to define styles inline with a CSS code chunk, but we recommend using an external file for easier manageability.\nWithin a markdown document you can apply one or more CSS classes to various document entities including headings, images, divs, and spans. CSS classes are applied using pandoc attributes. Once you’ve applied a class to an entity, it will derive its formatting from the CSS properties of the specified class.\n\n\nHeadings\nTo add a CSS class to a heading, use the edit button at the top right of the heading that appears when your cursor is within it (or use the F4 keyboard shortcut):\n\nNote the presence of the .important class within the Edit Attributes dialog.\nCSS classes applied to headings affect all content beneath the heading (an HTML &lt;section&gt; tag is wrapped around the content by Pandoc), so heading classes are a great way to provide custom styles for entire sections of your document.\n\n\n\n\n\n\nNote that the visual editor doesn’t currently render content using styles applied through CSS classes so you won’t see the custom formatting while editing. You will however see it when rendering and previewing the HTML version of the document.\n\n\n\n\n\nImages\nYou can apply CSS classes to images (for example, to give them a special border) using the standard Image dialog. To do this, double-click the image (or use the F4 shortcut with the image selected) and apply the desired classes:\n\nNote again that the visual editor won’t display your image with the applied CSS classes while editing, however when actually rendering the document to HTML you’ll see the styles reflected.\n\n\nDivs\nDivs are special entities that allow you to apply identifiers and/or styles to a region of a document. Divs are block elements (like paragraphs).\nYou can create divs using the Insert -&gt; Div command, and you can apply attributes (including CSS classes) to divs the same way as you apply attributes to headings (clicking the edit button or using the F4 keyboard shortcut when you are within a div):\n\nNote the presence of the .important class within the Div Attributes dialog.\n\n\nSpans\nSpans are special entities that allow you to apply identifiers and/or styles to a region of text. Spans are inline formatting marks (like bold or italic).\nSpans can be created by selecting text and using the Format -&gt; Span command:\n\nHere we’ve applied a span to the text “customize PDF reports” and we’ve used the span to apply the .important CSS class. Note that as with headings and images the formatting is not displayed in the visual editor, but will be visible when the document is rendered."
  },
  {
    "objectID": "docs/visual-editor/technical.html",
    "href": "docs/visual-editor/technical.html",
    "title": "Technical Writing",
    "section": "",
    "text": "Visual mode includes extensive support for Quarto features frequently used in technical writing including equations, citations, cross-references, footnotes, embedded code, and LaTeX. This article describes using these features in more depth."
  },
  {
    "objectID": "docs/visual-editor/technical.html#equations",
    "href": "docs/visual-editor/technical.html#equations",
    "title": "Technical Writing",
    "section": "Equations",
    "text": "Equations\nLaTeX equations are authored using standard Pandoc markdown syntax (the editor will automatically recognize the syntax and treat the equation as math). When you aren’t directly editing an equation it will appear as rendered math:\n\nAs shown above, when you select an equation with the keyboard or mouse you can edit the equation’s LaTeX. A preview of the equation will be shown below it as you type."
  },
  {
    "objectID": "docs/visual-editor/technical.html#cross-references",
    "href": "docs/visual-editor/technical.html#cross-references",
    "title": "Technical Writing",
    "section": "Cross References",
    "text": "Cross References\nCross References make it easier for readers to navigate your document by providing numbered references and hyperlinks to various entities like figures, tables, and equations.\nEvery cross-referenceable entity requires a label (unique identifier) and caption (description). For example, this is a cross-referenceable figure:\n![Elephant](elephant.png){#fig-elephant}\nThe presence of the caption (“Elephant”) and label (#fig-elephant) make this figure referenceable. This enables you to use the following syntax to refer to it elsewhere in the document:\nSee @fig-elephant for an illustration.\nHere is what this would look like rendered to HTML:\n\nSee the article on Cross References for full documentation on creating cross references and customizing their display.\nUse the Insert -&gt; Cross Reference… command to insert a cross reference:\n\nYou can also just type the prefix of a cross reference label (e.g. @fig-env) and select it via auto-complete:\n\nSimilar to hyperlinks, you can also navigate to the location of a cross-reference by clicking the popup link that appears when it’s selected:\n\nYou can also navigate directly to any cross-reference using IDE global search:"
  },
  {
    "objectID": "docs/visual-editor/technical.html#footnotes",
    "href": "docs/visual-editor/technical.html#footnotes",
    "title": "Technical Writing",
    "section": "Footnotes",
    "text": "Footnotes\nYou can include footnotes using the Insert -&gt; Footnote command (or the ⇧⌘ F7 keyboard shortcut). Footnote editing occurs in a pane immediately below the main document:\n\n\n\n\n\n\n\nBy default footnotes will be written in markdown immediately below the block in which they appear. You can customize this behavior via editor options."
  },
  {
    "objectID": "docs/visual-editor/technical.html#embedded-code",
    "href": "docs/visual-editor/technical.html#embedded-code",
    "title": "Technical Writing",
    "section": "Embedded Code",
    "text": "Embedded Code\nSource code which you include in a Quarto document can either be for display only or can be executed by Jupyter or Knitr as part of rendering. Code can furthermore be either inline or block.\n\nDisplaying Code\nTo display but not execute code, either use the Insert -&gt; Code Block menu item, or start a new line and type either:\n\n``` (for a plain code block); or\n```&lt;lang&gt; (where &lt;lang&gt; is a language) for a code block with syntax highlighting.\n\nThen press the Enter key. To display code inline, simply surround text with backticks (`code`), or use the Format -&gt; Code menu item.\n\n\nCode Chunks\nTo insert an executable code chunk, use the Insert -&gt; Code Chunk menu item, or start a new line and type:\n```{r}\nThen press the Enter key. Note that r could be another language supported by knitr (e.g. python or sql) and you can also include a chunk label and other chunk options.\nTo include inline R code, you just create normal inline code (e.g. by using backticks or the ⌘ D shortcut) but preface it with r. For example, this inline code will be executed by knitr: `r Sys.Date()`. Note that when the code displays in visual mode it won’t have the backticks (but they will still appear in source mode).\n\n\nRunning Chunks\nYou can execute the currently selected R or Python code chunk using either the run button at the top right of the code chunk or using the ⇧⌘ Enter keyboard shortcut:\n\nYou can execute code chunks up to the current one using the toolbar button or using the ⌥⌘ P keyboard shortcut."
  },
  {
    "objectID": "docs/visual-editor/technical.html#latex-and-html",
    "href": "docs/visual-editor/technical.html#latex-and-html",
    "title": "Technical Writing",
    "section": "LaTeX and HTML",
    "text": "LaTeX and HTML\nYou can also include raw LaTeX commands or HTML tags when authoring in visual mode. The raw markup will be automatically recognized and syntax highlighted. For example:\n\nThe above examples utilize inline LaTex and HTML. You can also include blocks of raw content using the commands on the Format -&gt; Raw menu. For example, here is a document with a raw LaTeX block:\n\n\n\n\n\n\n\nNote that Pandoc ignores LaTeX commands when not producing LaTeX based output, and ignores HTML tags when not producing HTML based output."
  },
  {
    "objectID": "docs/visual-editor/technical.html#citations",
    "href": "docs/visual-editor/technical.html#citations",
    "title": "Technical Writing",
    "section": "Citations",
    "text": "Citations\nVisual mode uses the standard Pandoc markdown representation for citations (e.g. [@citation]). Citations can be inserted from a variety of sources:\n\nYour document bibliography.\nZotero personal or group libraries.\nDOI (Document Object Identifier) references.\nSearches of Crossref, DataCite, or PubMed.\n\nIf you insert citations from Zotero, DOI look-up, or a search then they are automatically added to your document bibliography.\n\nBibliographies\nPandoc supports bibliographies in a wide variety of formats including BibTeX and CSL. Add a bibliography to your document using the bibliography YAML metadata field. For example:\n---\ntitle: \"My Document\"\nbibliography: references.bib\nlink-citations: true\n---\nNote that we’ve also specified the link-citations option, which will make your citations hyperlinks to the corresponding bibliography entries.\nSee the Pandoc Citations documentation for additional information on bibliography formats.\n\n\nInserting Citations\nYou insert citations by either using the Insert -&gt; Citation command or by using markdown syntax directly (e.g. [@cite] or @cite) .\nCitations go inside square brackets and are separated by semicolons. Each citation must have a key, composed of ‘@’ + the citation identifier from the database, and may optionally have a prefix, a locator, and a suffix. The citation key must begin with a letter, digit, or _, and may contain alphanumerics, _, and internal punctuation characters (:.#$%&-+?&lt;&gt;~/). Here are some examples:\n\n  \n    Blah Blah [see @doe99, pp. 33-35; also @smith04, chap. 1].\n  \n\n\n  Blah Blah [@doe99, pp. 33-35, 38-39 and passim].\n  \n\n\n  Blah Blah [@smith04;\n  @doe99].\n\n  Smith says blah [-@smith04].\n  \n\nYou can also write in-text citations, as follows:\n\n  \n    @smith04 says blah.\n  \n  \n    @smith04 [p. 33] says blah.\n  \n\nSee the Pandoc Citations documentation for additional information on citation syntax.\nUse the  toolbar button or the ⇧⌘ F8 keyboard shortcut to show the Insert Citation dialog:\n\nNote that you can insert multiple citations by using the add button on the right side of the item display.\n\nMarkdown Syntax\nYou can also insert citations directly using markdown syntax (e.g. [@cite]). When you do this a completion interface is provided for searching available citations:\n\n\n\nCitation IDs\nBefore inserting a citation from an external source you may wish to customize its ID. Within the Insert Citation dialog, click the edit button on the right side of citations to change their ID:\n\nIf you insert a new citation via code completion, you will also be provided with the opportunity to change its default citation ID.\nFor citations inserted from Zotero, you can also use the Better BibTeX plugin to generate citation IDs (this can be enabled via Citation Options if you have Better BibTeX installed).\n\n\nCitation Preview\nOnce you’ve inserted a citation, place the cursor over it to see a preview of it along with a link to the source if one is available:\n\n\n\n\nCitations from DOIs\nUse the From DOI pane of the Insert Citation dialog to insert a citation based on a DOI (e.g. that you have retrieved from a PubMed or other search):\n\nIf you are using markdown syntax, you can also paste a DOI after the [@ and it will be looked up:\n\nOnce you’ve confirmed that it’s the correct work (and possibly modified the suggested ID), the citation will be inserted into the document and an entry for the work added to your bibliography.\n\n\nCitations from Search\nUse the Crossref, DataCite, and PubMed panes of the Insert Citation dialog to search one of those services for a citation:\n\nItems inserted from a search will automatically be added to your bibliography.\nNote that for PubMed queries you can use the full supported query syntax. For example, this query searches on the author and title fields: Peterson[Author] AND Embolism[Title]. You can learn more about building PubMed queries here: https://pubmed.ncbi.nlm.nih.gov/advanced/.\n\n\nCitations from Zotero\nZotero is a popular free and open source reference manager. If you use Zotero, you can also insert citations directly from your Zotero libraries. If you have Zotero installed locally its location will be detected automatically and citations from your main library (My Library) will be available:\n\nZotero references will also show up automatically in completions:\n\nItems from Zotero will appear alongside items from your bibliography with a small “Z” logo juxtaposed over them. If you insert a citation from Zotero that isn’t already in your bibliography then it will be automatically added to the bibliography.\nIf you are running both RStudio and Zotero on your desktop, then no additional configuration is required for connecting to your Zotero library. If however you using RStudio Server and/or want to access your Zotero library over the web, then a few more steps are required (see the Zotero Web API section for details).\n\nGroup Libraries\nZotero Groups provide a powerful way to share collections with a class or work closely with colleagues on a project. By default, Zotero Group Libraries are not included in the Insert Citation dialog or citation completions. However, there are options available to use group libraries at a global, per-project, or per-document level.\nFor example, here we specify a project-level option to use the Reproducible Research Series (Year 1) group library:\n\nYou can also specify one or more libraries within YAML. For example:\n---\ntitle: \"Reproducible Research\"\nzotero: \"Reproducible Research Series (Year 1)\"\n---\nNote that you can also turn off Zotero entirely for a document using zotero: false:\n---\ntitle: \"Reproducible Research\"\nzotero: false\n---\n\n\nZotero Web API\nIf you are using RStudio Server and/or don’t have Zotero installed locally, you can still access your Zotero library using the Zotero Web API (assuming you have a Zotero web account and have synced your libraries to your account).\n\n\n\n\n\n\nIf you are running RStudio Desktop, it’s generally easier to also run Zotero on your desktop and access your library locally. That said, it is possible to access Zotero web libraries from RStudio Desktop if you prefer that configuration.\n\n\n\n\nAPI Access Key\nRStudio accesses Zotero web libraries using the Zotero Web API, so the first step is to create a Zotero account and then configure Zotero to sync its data to your account. You can do this using the Sync tab of the Zotero preferences:\n\nOnce you’ve configured your library to sync, you need to create a Zotero API Key to use with RStudio:\n\nFollow the instructions to create a new access key. Note that if you want to use Group Libraries with RStudio that you should change the default to provide read-only access to groups (as illustrated above).\nBe sure to record your key after generating it (i.e. copy it to the clipboard and/or save it somewhere more permanent) as you won’t be able to view it again after you navigate away.\nFinally, go to the R Markdown -&gt; Citations preferences to connect Zotero to RStudio using your key:\n\nSet the Zotero Library option to “Web”, then paste in your Zotero Web API Key. You can use Verify Key… button to confirm that your Zotero API key is working correctly.\nOnce you’ve confirmed your connection you are ready to start inserting citations from Zotero."
  },
  {
    "objectID": "docs/visual-editor/markdown.html",
    "href": "docs/visual-editor/markdown.html",
    "title": "Markdown Output",
    "section": "",
    "text": "The Quarto visual editor generates markdown using Pandoc. This means that in some cases your markdown will be rewritten to conform to standard Pandoc idioms. For example, Pandoc inserts 3 spaces after list bullets and automatically escapes characters that might be used for markdown syntax.\nHere is a list of conventions for Pandoc generated markdown that might differ from your own markdown writing style:\n\n*text* is used in preference to _text_\nBacktick code blocks are written as ``` {.md} rather than ```md\nBacktick code blocks with no attributes are rendered as 4-space indented code blocks\nHorizontal rules are written as dashes spanning the full width of the document\nPlain links are written as &lt;https://yihui.org&gt; rather than https://yihui.org\nBullet and numbered lists use additional leading spaces before list item content\nThe blockquote character (&gt;) is included on each new line of a blockquote\nTable captions are written below rather than above tables\nMultiline HTML and TeX blocks use the explicit raw attribute (e.g. ```{=tex})\nInline footnotes are replaced with footnotes immediately below the paragraph\nNested divs use ::: at all levels so long as their attributes are distinct\nUnnumbered sections are designated with {.unnumbered} rather than {-}\nCharacters used for markdown syntax (e.g. *, _, or #) are always escaped\n\nWhile some of this behavior might be bothersome at first, if you decide that visual editing mode is useful for your workflow it’s probably best to just adapt to writing your own markdown the same way that Pandoc does. Note that you can also configure source mode to write markdown using these conventions, ensuring that the same markdown is written no matter which mode edits originate from."
  },
  {
    "objectID": "docs/visual-editor/markdown.html#overview",
    "href": "docs/visual-editor/markdown.html#overview",
    "title": "Markdown Output",
    "section": "",
    "text": "The Quarto visual editor generates markdown using Pandoc. This means that in some cases your markdown will be rewritten to conform to standard Pandoc idioms. For example, Pandoc inserts 3 spaces after list bullets and automatically escapes characters that might be used for markdown syntax.\nHere is a list of conventions for Pandoc generated markdown that might differ from your own markdown writing style:\n\n*text* is used in preference to _text_\nBacktick code blocks are written as ``` {.md} rather than ```md\nBacktick code blocks with no attributes are rendered as 4-space indented code blocks\nHorizontal rules are written as dashes spanning the full width of the document\nPlain links are written as &lt;https://yihui.org&gt; rather than https://yihui.org\nBullet and numbered lists use additional leading spaces before list item content\nThe blockquote character (&gt;) is included on each new line of a blockquote\nTable captions are written below rather than above tables\nMultiline HTML and TeX blocks use the explicit raw attribute (e.g. ```{=tex})\nInline footnotes are replaced with footnotes immediately below the paragraph\nNested divs use ::: at all levels so long as their attributes are distinct\nUnnumbered sections are designated with {.unnumbered} rather than {-}\nCharacters used for markdown syntax (e.g. *, _, or #) are always escaped\n\nWhile some of this behavior might be bothersome at first, if you decide that visual editing mode is useful for your workflow it’s probably best to just adapt to writing your own markdown the same way that Pandoc does. Note that you can also configure source mode to write markdown using these conventions, ensuring that the same markdown is written no matter which mode edits originate from."
  },
  {
    "objectID": "docs/visual-editor/markdown.html#writer-options",
    "href": "docs/visual-editor/markdown.html#writer-options",
    "title": "Markdown Output",
    "section": "Writer Options",
    "text": "Writer Options\nSome aspects of markdown output can be customized via global, project, or file-level options, including:\n\nHow to wrap / break lines (fixed column, sentence-per-line, etc.).\nWhere to write footnotes (below the current paragraph or section, or at the end of the document).\nWhether to use the visual mode markdown writer when saving markdown from source mode (to ensure consistency between documents saved from either mode).\n\nYou can set these options within the R Markdown Global Options or Project Options, or can alternatively set them on a per-file basis using YAML (as described below).\n\nLine Wrapping\nBy default, the visual editor writes Markdown with no line wrapping (paragraphs all occupy a single line). This matches the behavior of markdown source editing mode within RStudio.\nHowever, if you prefer to insert line breaks at a particular column (e.g. 72 or 80), or to insert a line break after each sentence, you can set a global or per-project editor option to this effect.\nYou can also set this behavior on a per-document basis via the wrap option. For example, to wrap lines after 72 characters you would use this:\n---\neditor:\n  markdown:\n    wrap: 72\n---\nTo insert a line break after each sentence, use wrap: sentence. For example:\n---\neditor:\n  markdown:\n    wrap: sentence\n---\n\n\n\n\n\n\nThe algorithm used for sentence wrapping will handle English and Japanese text well, but may not detect the end of sentences accurately for other languages.\n\n\n\nIf you have enabled a global line wrapping option and want to turn off wrapping for a given document, use wrap: none.\n\n\nReferences\nBy default, references are written at the end of the block where their corresponding footnote appears. You can override this behavior using the references option.\nFor example, to write references at the end of sections rather than blocks you would use:\n---\ntitle: \"My Document\"\neditor:\n  markdown:\n    references: \n      location: block\n---\nValid values for the references option are block, section, and document.\nNote that you can also set a global or per-project editor option to control reference writing behavior.\nIf you are aggregating a set of markdown documents into a larger work, you may want to make sure that reference identifiers are unique across all of your documents (e.g. you don’t want to have [^1] appear multiple times). You can ensure uniqueness via the prefix option. For example:\n---\ntitle: \"My Document\"\neditor:\n  markdown:\n    references: \n      location: block\n      prefix: \"mydoc\"\n---\nThis will result in footnotes in this document using the specified prefix (e.g. [^mydoc-1]), ensuring they are globally unique across the manuscript.\n\n\n\n\n\n\nNote that if you are within a Quarto book project then a references prefix is applied automatically so no changes to editor: markdown are required.\n\n\n\n\n\nCanonical Mode\nIf you have a workflow that involves editing in both visual and source mode, you may want to ensure that the same markdown is written no matter which mode edits originate from. You can accomplish this using the canonical option. For example:\n---\ntitle: \"My Document\"\neditor:\n  markdown:\n    wrap: 72\n    references: \n      location: block\n    canonical: true\n---\nWith canonical: true, edits in visual mode and source mode will result in identical markdown output. This is especially useful if you have multiple authors collaborating using version control, with a mixture of source and visual mode editing among the authors."
  },
  {
    "objectID": "docs/visual-editor/markdown.html#known-limitations",
    "href": "docs/visual-editor/markdown.html#known-limitations",
    "title": "Markdown Output",
    "section": "Known Limitations",
    "text": "Known Limitations\nThere are a handful of Pandoc markdown extensions not currently supported by visual editing. These are infrequently used extensions, so in all likelihood they won’t affect documents you edit, but are still worth noting.\n\n\n\n\n\n\n\n\nExtension(s)\nExample\nBehavior\n\n\n\n\nInline footnotes\n^[inline]\nConverted to numeric footnote.\n\n\nFootnote identifiers\n[^longnote]\nConverted to numeric footnote.\n\n\nExample lists\n(@) First example\nRead/written as ordinary numbered lists.\n\n\nAuto-list numbers\n#. First item\nRead/written as ordinary numbered lists.\n\n\nReference links\nThis is a [link]\nConverted to ordinary links.\n\n\nMultiMarkdown attributes\n# Heading [id]\nConverted to Pandoc attributes.\n\n\n\nThe visual editor is unable to parse non-YAML title blocks (e.g. old-style % titles or MultiMarkdown titles) and also unable to parse non top-level YAML metadata blocks. If these forms of metadata are encountered, visual mode will fail to load with a warning."
  },
  {
    "objectID": "docs/visual-editor/vscode/index.html",
    "href": "docs/visual-editor/vscode/index.html",
    "title": "Visual Editing in VS Code",
    "section": "",
    "text": "The Quarto VS Code Extension includes a visual markdown editor that supports all of Quarto’s markdown syntax including tables, citations, cross-references, footnotes, divs/spans, definition lists, attributes, raw HTML/TeX, and more:\n\nYou can switch between visual and source mode at any time and can even edit documents concurrently in both modes. To switch between visual and source mode:\n\nUse the ⇧⌘ F4 keyboard shortcut.\nUse the context menu from anywhere in a document:\n\nUse the Edit in Visual Mode and Edit in Source Mode commands:\n\nUse the editor menu:\n\n\nYou can also right click a .qmd document in the file explorer and select the Open With… command, which will prompt you for the editor to open the file with:\n\nNote that this menu also provides an option to configure the default editor for .qmd files: use this if you want to primarily edit in visual mode and occasionally switch to source mode."
  },
  {
    "objectID": "docs/visual-editor/vscode/index.html#overview",
    "href": "docs/visual-editor/vscode/index.html#overview",
    "title": "Visual Editing in VS Code",
    "section": "",
    "text": "The Quarto VS Code Extension includes a visual markdown editor that supports all of Quarto’s markdown syntax including tables, citations, cross-references, footnotes, divs/spans, definition lists, attributes, raw HTML/TeX, and more:\n\nYou can switch between visual and source mode at any time and can even edit documents concurrently in both modes. To switch between visual and source mode:\n\nUse the ⇧⌘ F4 keyboard shortcut.\nUse the context menu from anywhere in a document:\n\nUse the Edit in Visual Mode and Edit in Source Mode commands:\n\nUse the editor menu:\n\n\nYou can also right click a .qmd document in the file explorer and select the Open With… command, which will prompt you for the editor to open the file with:\n\nNote that this menu also provides an option to configure the default editor for .qmd files: use this if you want to primarily edit in visual mode and occasionally switch to source mode."
  },
  {
    "objectID": "docs/visual-editor/vscode/index.html#keyboard-shortcuts",
    "href": "docs/visual-editor/vscode/index.html#keyboard-shortcuts",
    "title": "Visual Editing in VS Code",
    "section": "Keyboard Shortcuts",
    "text": "Keyboard Shortcuts\nVisual mode supports both traditional keyboard shortcuts (e.g. ⌘ B for bold) as well as markdown shortcuts (using markdown syntax directly). For example, enclose **bold** text in asterisks or type ## and press space to create a second level heading.\nHere are the available keyboard and markdown shortcuts:\n\n\n\nCommand\nKeyboard Shortcut\nMarkdown Shortcut\n\n\n\n\nBold\n⌘ B\n**bold**\n\n\nItalic\n⌘ I\n*italic*\n\n\nCode\n⌘ D\n`code`\n\n\nStrikeout\n\n~~strike~~\n\n\nSubscript\n\n~sub~\n\n\nSuperscript\n\n^super^\n\n\nHeading 1\n⌥⌘ 1\n#\n\n\nHeading 2\n⌥⌘ 2\n##\n\n\nHeading 3\n⌥⌘ 3\n###\n\n\nHeading Attributes\n\n{#id .class}\n\n\nLink\n⌘ K\n&lt;href&gt;\n\n\nBlockquote\n\n&gt;\n\n\nCode Block\n⇧⌘ \\\n```\n\n\nCode Cell\n⌥⌘ I\n```{python}\n\n\nRaw Block\n\n```{=html}\n\n\nDiv\n\n:::\n\n\nBullet List\n\n-\n\n\nOrdered List\n\n1.\n\n\nTight List\n⌥⌘ 9\n\n\n\nList Check\n\n[x]\n\n\nEmoji\n\n:smile:\n\n\nDefinition\n\n:\n\n\nNon-Breaking Space\n⌃ Space\n\n\n\nHard Line Break\n⇧ Enter\n\n\n\nParagraph\n⌥⌘ 0\n\n\n\nImage\n⇧⌘ I\n\n\n\nFootnote\n⇧⌘ F7\n\n\n\nCitation\n⇧⌘ F8\n[@\n\n\nTable\n⌥⌘ T\n\n\n\nEditing Comment\n⇧⌘ C\n\n\n\nSelect All\n⌘ A\n\n\n\nClear Formatting\n⌘ \\\n\n\n\nEdit Attributes\nF4\n\n\n\n\n\n\n\n\n\n\nFor markdown shortcuts, if you didn’t intend to use a shortcut and want to reverse its effect, just press the backspace key."
  },
  {
    "objectID": "docs/visual-editor/vscode/index.html#insert-anything",
    "href": "docs/visual-editor/vscode/index.html#insert-anything",
    "title": "Visual Editing in VS Code",
    "section": "Insert Anything",
    "text": "Insert Anything\nYou can also use the catch-all ⌘ / shortcut to insert just about anything. Just execute the shortcut then type what you want to insert. For example:\n\n\n\n\n\n\n\n\n\n\nIf you are at the beginning of a line (as displayed above), you can also enter plain / to invoke the shortcut."
  },
  {
    "objectID": "docs/visual-editor/vscode/index.html#editor-toolbar",
    "href": "docs/visual-editor/vscode/index.html#editor-toolbar",
    "title": "Visual Editing in VS Code",
    "section": "Editor Toolbar",
    "text": "Editor Toolbar\nThe editor toolbar includes buttons for the most commonly used formatting commands:\n\nAdditional commands are available on the Format, Insert, and Table menus:\n\n\n\n\n\n\n\n\nFormat\nInsert\nTable"
  },
  {
    "objectID": "docs/visual-editor/vscode/index.html#editor-options",
    "href": "docs/visual-editor/vscode/index.html#editor-options",
    "title": "Visual Editing in VS Code",
    "section": "Editor Options",
    "text": "Editor Options\nThere are a variety of VS Code options available to configure the behavior of the visual editor. You can location these options by filtering on quarto.visualEditor in the settings pane:\n\nOptions enable configuration of appearance (font size, content width, etc.), markdown output (e.g. column wrapping), spell checking, and default spacing for lists."
  },
  {
    "objectID": "docs/visual-editor/vscode/index.html#zotero-citations",
    "href": "docs/visual-editor/vscode/index.html#zotero-citations",
    "title": "Visual Editing in VS Code",
    "section": "Zotero Citations",
    "text": "Zotero Citations\nZotero is a popular free and open source reference manager. The Quarto visual editor integrates directly with Zotero, enabling you to use the Insert Citation command to use references from your Zotero libraries:\n\nZotero references will also show up automatically in visual editor completions:\n\nItems from Zotero will appear alongside items from your bibliography with a small “Z” logo juxtaposed over them. If you insert a citation from Zotero that isn’t already in your bibliography then it will be automatically added to the bibliography.\n\nZotero Setup\nZotero integration uses the Zotero Web API, so the first step is to create a Zotero account and then configure Zotero to sync its data to your account. You can do this using the Sync tab of the Zotero preferences:\n\nOnce you’ve configured your library to sync, you need to create a Zotero API Key:\n\nFollow the instructions to create a new access key. Note that if you want to use Group Libraries, you should change the default to provide read-only access to groups (as illustrated above).\nBe sure to record your key after generating it (i.e. copy it to the clipboard and/or save it somewhere more permanent) as you won’t be able to view it again after you navigate away.\nFinally, execute the Quarto: Zotero - Sync Web Library command to connect VS Code with your Zotero web libraries:\n\nAfter you provide your API key and it is validated, an initial sync of your Zotero libraries is performed. After this, you are ready to start inserting citations from Zotero.\n\n\nGroup Libraries\nZotero Groups provide a powerful way to share collections with a class or work closely with colleagues on a project. By default, Zotero Group Libraries are not included in the Insert Citation dialog or citation completions. However, you can use the Quarto &gt; Zotero: Group Libraries option to activate one or more group libraries (either globally, or per-workspace):\n\nAfter you’ve added a group library to the list, a sync will be peformed and you should see the library in the Insert Citation dialog. If you don’t, double check the exact spelling of the group library name you are configuring (you may even want to copy and paste it from Zotero so you are certain to get it right)."
  },
  {
    "objectID": "docs/visual-editor/vscode/index.html#markdown-output",
    "href": "docs/visual-editor/vscode/index.html#markdown-output",
    "title": "Visual Editing in VS Code",
    "section": "Markdown Output",
    "text": "Markdown Output\nThe Quarto visual editor generates markdown using Pandoc. This means that in some cases your markdown will be rewritten to conform to standard Pandoc idioms. For example, Pandoc inserts 3 spaces after list bullets and automatically escapes characters that might be used for markdown syntax.\nHere is a list of conventions for Pandoc generated markdown that might differ from your own markdown writing style:\n\n*text* is used in preference to _text_\nBacktick code blocks are written as ``` {.md} rather than ```md\nBacktick code blocks with no attributes are rendered as 4-space indented code blocks\nHorizontal rules are written as dashes spanning the full width of the document\nPlain links are written as &lt;https://yihui.org&gt; rather than https://yihui.org\nBullet and numbered lists use additional leading spaces before list item content\nThe blockquote character (&gt;) is included on each new line of a blockquote\nTable captions are written below rather than above tables\nMultiline HTML and TeX blocks use the explicit raw attribute (e.g. ```{=tex})\nInline footnotes are replaced with footnotes immediately below the paragraph\nNested divs use ::: at all levels so long as their attributes are distinct\nUnnumbered sections are designated with {.unnumbered} rather than {-}\nCharacters used for markdown syntax (e.g. *, _, or #) are always escaped\n\nWhile some of this behavior might be bothersome at first, if you decide that visual editing mode is useful for your workflow it’s probably best to just adapt to writing your own markdown the same way that Pandoc does.\n\nWriter Options\nSome aspects of markdown output can be customized via global, project, or file-level options, including:\n\nHow to wrap / break lines (fixed column, sentence-per-line, etc.).\nWhere to write footnotes (below the current paragraph or section, or at the end of the document).\nWheter to write inline or reference style links.\n\nYou can specify these options in one of two ways:\n\nAs a global or per-workspace VS Code option (you can find the options that affect markdown output by filtering on quarto.visualEditor.markdown).\nSpecifying them within document or project level YAML (described below).\n\n\nLine Wrapping\nBy default, the visual editor writes Markdown with no line wrapping (paragraphs all occupy a single line). However, if you prefer to insert line breaks at a particular column (e.g. 72 or 80), or to insert a line break after each sentence, you can use the quarto.visualEditor.markdownWrap and quarto.visualEditor.markdownWrapColumn options accessible from the settings editor in VS Code.\nYou can also set this behavior on a per-document or per-project basis via the wrap option. For example, to wrap lines after 72 characters you would use this:\n---\neditor:\n  markdown:\n    wrap: 72\n---\nTo insert a line break after each sentence, use wrap: sentence. For example:\n---\neditor:\n  markdown:\n    wrap: sentence\n---\n\n\n\n\n\n\nThe algorithm used for sentence wrapping will handle English and Japanese text well, but may not detect the end of sentences accurately for other languages.\n\n\n\nIf you have enabled a global line wrapping option and want to turn off wrapping for a given document, use wrap: none.\n\n\nReferences\nBy default, references (footnotes and reference links) are written at the end of the block where their corresponding footnote appears. You can override this behavior using the quarto.visualEditor.markdownReferences VS Code setting or by using the references option within document or project YAML.\nFor example, to write references at the end of sections rather than blocks you would use:\n---\ntitle: \"My Document\"\neditor:\n  markdown:\n    references: \n      location: block\n---\nValid values for the references option are block, section, and document.\nIf you are aggregating a set of markdown documents into a larger work, you may want to make sure that reference identifiers are unique across all of your documents (e.g. you don’t want to have [^1] appear multiple times). You can ensure uniqueness via the prefix option. For example:\n---\ntitle: \"My Document\"\neditor:\n  markdown:\n    references: \n      location: block\n      prefix: \"mydoc\"\n---\nThis will result in footnotes in this document using the specified prefix (e.g. [^mydoc-1]), ensuring they are globally unique across the manuscript.\n\n\n\n\n\n\nNote that if you are within a Quarto book project then a references prefix is applied automatically so no changes to editor options are required.\n\n\n\n\n\nLinks\nLinks are written inline by default, however they can be written as reference links (below content as with footnotes) by adding the links: true option to the references section of document or project YAML. For example:\n---\ntitle: \"My Document\"\neditor:\n  markdown:\n    references: \n      location: block\n      links: true\n---\nYou can alternatively enable reference links using the VS Code quarto.visualEditor.markdownReferenceLinks option.\n\n\n\nKnown Limitations\nThere are a handful of Pandoc markdown extensions not currently supported by visual editing. These are infrequently used extensions, so in all likelihood they won’t affect documents you edit, but are still worth noting.\n\n\n\n\n\n\n\n\nExtension(s)\nExample\nBehavior\n\n\n\n\nInline footnotes\n^[inline]\nConverted to numeric footnote.\n\n\nFootnote identifiers\n[^longnote]\nConverted to numeric footnote.\n\n\nExample lists\n(@) First example\nRead/written as ordinary numbered lists.\n\n\nAuto-list numbers\n#. First item\nRead/written as ordinary numbered lists.\n\n\nReference links\nThis is a [link]\nConverted to ordinary links.\n\n\nMultiMarkdown attributes\n# Heading [id]\nConverted to Pandoc attributes.\n\n\n\nThe visual editor is unable to parse non-YAML title blocks (e.g. old-style % titles or MultiMarkdown titles) and also unable to parse non top-level YAML metadata blocks. If these forms of metadata are encountered, visual mode will fail to load with a warning.\nNote that support for reference links can be enabled via the editor: markdown: references: links option in document or project YAML, or the VS Code quarto.visualEditor.markdownReferenceLinks option. Reference links will be written according the reference location option (either the block or section in which they appear, or alternatively at the end of the document)."
  },
  {
    "objectID": "docs/visual-editor/options.html",
    "href": "docs/visual-editor/options.html",
    "title": "Shortcuts & Options",
    "section": "",
    "text": "Visual mode supports both traditional keyboard shortcuts (e.g. ⌘ B for bold) as well as markdown shortcuts (using markdown syntax directly). For example, enclose **bold** text in asterisks or type ## and press space to create a second level heading.\nHere are the available keyboard and markdown shortcuts:\n\n\n\nCommand\nKeyboard Shortcut\nMarkdown Shortcut\n\n\n\n\nBold\n⌘ B\n**bold**\n\n\nItalic\n⌘ I\n*italic*\n\n\nCode\n⌘ D\n`code`\n\n\nStrikeout\n\n~~strike~~\n\n\nSubscript\n\n~sub~\n\n\nSuperscript\n\n^super^\n\n\nHeading 1\n⌥⌘ 1\n#\n\n\nHeading 2\n⌥⌘ 2\n##\n\n\nHeading 3\n⌥⌘ 3\n###\n\n\nHeading Attributes\n\n{#id .class}\n\n\nLink\n⌘ K\n&lt;href&gt;\n\n\nBlockquote\n\n&gt;\n\n\nCode Block\n⇧⌘ \\\n```\n\n\nR Code Chunk\n⌥⌘ I\n```{r}\n\n\nRaw Block\n\n```{=html}\n\n\nDiv\n\n:::\n\n\nBullet List\n\n-\n\n\nOrdered List\n\n1.\n\n\nTight List\n⌥⌘ 9\n\n\n\nList Check\n\n[x]\n\n\nEmoji\n\n:smile:\n\n\nDefinition\n\n:\n\n\nNon-Breaking Space\n⌃ Space\n\n\n\nHard Line Break\n⇧ Enter\n\n\n\nParagraph\n⌥⌘ 0\n\n\n\nImage\n⇧⌘ I\n\n\n\nFootnote\n⇧⌘ F7\n\n\n\nCitation\n⇧⌘ F8\n[@\n\n\nTable\n⌥⌘ T\n\n\n\nEditing Comment\n⇧⌘ C\n\n\n\nSelect All\n⌘ A\n\n\n\nClear Formatting\n⌘ \\\n\n\n\nEdit Attributes\nF4\n\n\n\nRun Code Chunk\n⇧⌘ Enter\n\n\n\nRun Previous Chunks\n⇧⌥⌘ P\n\n\n\n\n\n\n\n\n\n\nFor markdown shortcuts, if you didn’t intend to use a shortcut and want to reverse its effect, just press the backspace key."
  },
  {
    "objectID": "docs/visual-editor/options.html#shortcuts",
    "href": "docs/visual-editor/options.html#shortcuts",
    "title": "Shortcuts & Options",
    "section": "",
    "text": "Visual mode supports both traditional keyboard shortcuts (e.g. ⌘ B for bold) as well as markdown shortcuts (using markdown syntax directly). For example, enclose **bold** text in asterisks or type ## and press space to create a second level heading.\nHere are the available keyboard and markdown shortcuts:\n\n\n\nCommand\nKeyboard Shortcut\nMarkdown Shortcut\n\n\n\n\nBold\n⌘ B\n**bold**\n\n\nItalic\n⌘ I\n*italic*\n\n\nCode\n⌘ D\n`code`\n\n\nStrikeout\n\n~~strike~~\n\n\nSubscript\n\n~sub~\n\n\nSuperscript\n\n^super^\n\n\nHeading 1\n⌥⌘ 1\n#\n\n\nHeading 2\n⌥⌘ 2\n##\n\n\nHeading 3\n⌥⌘ 3\n###\n\n\nHeading Attributes\n\n{#id .class}\n\n\nLink\n⌘ K\n&lt;href&gt;\n\n\nBlockquote\n\n&gt;\n\n\nCode Block\n⇧⌘ \\\n```\n\n\nR Code Chunk\n⌥⌘ I\n```{r}\n\n\nRaw Block\n\n```{=html}\n\n\nDiv\n\n:::\n\n\nBullet List\n\n-\n\n\nOrdered List\n\n1.\n\n\nTight List\n⌥⌘ 9\n\n\n\nList Check\n\n[x]\n\n\nEmoji\n\n:smile:\n\n\nDefinition\n\n:\n\n\nNon-Breaking Space\n⌃ Space\n\n\n\nHard Line Break\n⇧ Enter\n\n\n\nParagraph\n⌥⌘ 0\n\n\n\nImage\n⇧⌘ I\n\n\n\nFootnote\n⇧⌘ F7\n\n\n\nCitation\n⇧⌘ F8\n[@\n\n\nTable\n⌥⌘ T\n\n\n\nEditing Comment\n⇧⌘ C\n\n\n\nSelect All\n⌘ A\n\n\n\nClear Formatting\n⌘ \\\n\n\n\nEdit Attributes\nF4\n\n\n\nRun Code Chunk\n⇧⌘ Enter\n\n\n\nRun Previous Chunks\n⇧⌥⌘ P\n\n\n\n\n\n\n\n\n\n\nFor markdown shortcuts, if you didn’t intend to use a shortcut and want to reverse its effect, just press the backspace key."
  },
  {
    "objectID": "docs/visual-editor/options.html#insert-anything",
    "href": "docs/visual-editor/options.html#insert-anything",
    "title": "Shortcuts & Options",
    "section": "Insert Anything",
    "text": "Insert Anything\nYou can also use the catch-all ⌘ / shortcut to insert just about anything. Just execute the shortcut then type what you want to insert. For example:\n\n\n\n\n\n\n\n\n\n\nIf you are at the beginning of a line (as displayed above) you can also enter plain / to invoke the shortcut."
  },
  {
    "objectID": "docs/visual-editor/options.html#global-options",
    "href": "docs/visual-editor/options.html#global-options",
    "title": "Shortcuts & Options",
    "section": "Global Options",
    "text": "Global Options\nYou can customize visual editing options within R Markdown -&gt; Visual (note that the visual editor was originally created for use with R Markdown so its options are located there — these options are also applicable to usage with Quarto):\n\n\n\n\nOption\nDescription\n\n\n\n\nUse visual editing by default\nSwitch to visual mode immediately when creating new documents.\n\n\nShow document outline by default\nShow the navigational outline when opening documents in visual mode.\n\n\nEditor content width\nMaximum width for editing content. This is intended to keep editing similar to the width that users will see.\n\n\nEditor font size\nBase font size for editor content (default: inherit from IDE settings).\n\n\nShow margin column indicator in code blocks\nShow vertical line that indicates location of editing margin column (e.g. 80).\n\n\nDefault spacing between list items\nWhether to use tight or normal spacing between list items by default. See Tight Lists for details.\n\n\nAutomatic text wrapping (line breaks)\nWhen writing markdown, automatically insert line breaks after sentences or at a specified column (default: flow text; no auto-wrapping). See Line Wrapping for details.\n\n\nWrite references at end of current\nWrite references (footnotes) at the end of the block or section where they appear, or at the end of the document. See References for details.\n\n\nWrite canonical visual mode markdown in source mode\nUse the visual mode markdown writer when saving markdown from source mode (ensure consistency between documents saved from either mode)."
  },
  {
    "objectID": "docs/visual-editor/options.html#citation-options",
    "href": "docs/visual-editor/options.html#citation-options",
    "title": "Shortcuts & Options",
    "section": "Citation Options",
    "text": "Citation Options\nYou can customize visual editor citation options within R Markdown -&gt; Citations:\n\n\n\n\nOption\nDescription\n\n\n\n\nZotero Library\nLocation of Zotero citation library (Local or Web).\n\n\nZotero Data Directory\nLocation of Zotero local data directory.\n\n\nUse libraries\nZotero libraries to use as reference sources.\n\n\nUse Better BibTeX for citation keys and BibTeX export.\nOptionally use Better BibTeX to generate citation keys and export BibTeX from Zotero (this option appears only if Better BibTeX is installed)."
  },
  {
    "objectID": "docs/visual-editor/options.html#project-options",
    "href": "docs/visual-editor/options.html#project-options",
    "title": "Shortcuts & Options",
    "section": "Project Options",
    "text": "Project Options\nGlobal options that affect the way markdown is written can also be customized on a per-project basis. You can do this using the R Markdown pane of the Project Options dialog:\n\nBy default projects inherit the current global settings for markdown writing and Zotero libraries."
  },
  {
    "objectID": "docs/visual-editor/options.html#file-options",
    "href": "docs/visual-editor/options.html#file-options",
    "title": "Shortcuts & Options",
    "section": "File Options",
    "text": "File Options\nGlobal and project options that affect the way markdown is written can also be customized on a per-file basis . You can do this by including an editor: markdown key in the YAML front matter of your document. For example:\n---\ntitle: \"My Document\"\nauthor: \"Jane Doe\"\neditor:\n  markdown:\n    wrap: 72\n---\nYou might want to do this to ensure that multiple authors on different workstations use the same markdown writing options.\nYou can also instruct RStudio to use these same options when saving files from source mode. To do this add the canonical option. For example:\n---\neditor:\n  markdown:\n    wrap: 72\n    canonical: true\n---\nWith canonical: true, edits in visual mode and source mode will result in identical markdown output. This is especially useful if you have multiple authors collaborating using version control, with a mixture of source and visual mode editing among the authors.\nSee the documentation on Writer Options for additional details on markdown writing options."
  },
  {
    "objectID": "docs/visual-editor/index.html",
    "href": "docs/visual-editor/index.html",
    "title": "Visual Editing in RStudio",
    "section": "",
    "text": "The Quarto visual editor provides a WYSIWYM editing interface for all of Pandoc markdown, including tables, citations, cross-references, footnotes, divs/spans, definition lists, attributes, raw HTML/TeX, and more. The visual editor also includes support for executing code cells and viewing their output inline:\n\nThe visual editor doesn’t attempt to abstract away or obscure the underlying markdown document. Rather, it aims to provide a highly productive writing interface for people that love markdown. You can also still use most markdown constructs (e.g., ## or bold) directly for formatting.\n\n\nMarkdown documents can be edited in either source or visual mode. To switch into visual mode for a given document, use the Source or Visual button at the top-left of the document toolbar (or alternatively the ⌘⇧ F4 keyboard shortcut):\n\nNote that you can switch between source and visual mode at any time (editing location and undo/redo state will be preserved when you switch)."
  },
  {
    "objectID": "docs/visual-editor/index.html#overview",
    "href": "docs/visual-editor/index.html#overview",
    "title": "Visual Editing in RStudio",
    "section": "",
    "text": "The Quarto visual editor provides a WYSIWYM editing interface for all of Pandoc markdown, including tables, citations, cross-references, footnotes, divs/spans, definition lists, attributes, raw HTML/TeX, and more. The visual editor also includes support for executing code cells and viewing their output inline:\n\nThe visual editor doesn’t attempt to abstract away or obscure the underlying markdown document. Rather, it aims to provide a highly productive writing interface for people that love markdown. You can also still use most markdown constructs (e.g., ## or bold) directly for formatting.\n\n\nMarkdown documents can be edited in either source or visual mode. To switch into visual mode for a given document, use the Source or Visual button at the top-left of the document toolbar (or alternatively the ⌘⇧ F4 keyboard shortcut):\n\nNote that you can switch between source and visual mode at any time (editing location and undo/redo state will be preserved when you switch)."
  },
  {
    "objectID": "docs/visual-editor/index.html#getting-started",
    "href": "docs/visual-editor/index.html#getting-started",
    "title": "Visual Editing in RStudio",
    "section": "Getting Started",
    "text": "Getting Started\nThe Quarto visual editor is currently available as a feature of the RStudio IDE. The visual editor will eventually also be made available in standalone form.\nTo get started with the visual editor, download the latest release of RStudio (v2023.03) for your platform from:\nhttps://posit.co/download/rstudio-desktop/"
  },
  {
    "objectID": "docs/visual-editor/index.html#using-the-editor",
    "href": "docs/visual-editor/index.html#using-the-editor",
    "title": "Visual Editing in RStudio",
    "section": "Using the Editor",
    "text": "Using the Editor\n\nKeyboard Shortcuts\nThere are keyboard shortcuts for all basic editing tasks. Visual mode supports both traditional keyboard shortcuts (e.g. ⌘ B for bold) as well as markdown shortcuts (using markdown syntax directly). For example, enclose **bold** text in asterisks or type ## and press space to create a second level heading. Here are some of the most commonly used shortcuts:\n\n\n\nCommand\nKeyboard Shortcut\nMarkdown Shortcut\n\n\n\n\nBold\n⌘ B\n**bold**\n\n\nItalic\n⌘ I\n*italic*\n\n\nCode\n⌘ D\n`code`\n\n\nHeading 1\n⌥⌘ 1\n#\n\n\nHeading 2\n⌥⌘ 2\n##\n\n\nHeading 3\n⌥⌘ 3\n###\n\n\nLink\n⌘ K\n&lt;href&gt;\n\n\nR Code Chunk\n⌥⌘ I\n```{r}\n\n\n\nSee the editing shortcuts article for a complete list of all shortcuts.\n\n\nInsert Anything\nYou can also use the catch-all ⌘ / shortcut to insert just about anything. Just execute the shortcut then type what you want to insert. For example:\n\n\n\n\n\n\n\n\n\n\nIf you are at the beginning of a line (as displayed above), you can also enter plain / to invoke the shortcut.\n\n\nEditor Toolbar\nThe editor toolbar includes buttons for the most commonly used formatting commands:\n\nAdditional commands are available on the Format, Insert, and Table menus:\n\n\n\n\n\n\n\n\nFormat\nInsert\nTable"
  },
  {
    "objectID": "docs/visual-editor/index.html#learning-more",
    "href": "docs/visual-editor/index.html#learning-more",
    "title": "Visual Editing in RStudio",
    "section": "Learning More",
    "text": "Learning More\nCheck out the following articles to learn more about visual markdown editing:\n\nTechnical Writing covers features commonly used in scientific and technical writing, including citations, cross-references, footnotes, equations, embedded code, and LaTeX.\nContent Editing provides more depth on visual editor support for tables, lists, pandoc attributes, CSS styles, comments, symbols/emojis, etc.\nShortcuts & Options documents the two types of shortcuts you can use with the editor: standard keyboard shortcuts and markdown shortcuts and describes various options for configuring the editor.\nMarkdown Output describes how the visual editor parses and writes markdown and describes various ways you can customize this."
  },
  {
    "objectID": "docs/output-formats/html-themes-more.html",
    "href": "docs/output-formats/html-themes-more.html",
    "title": "More About Quarto Themes",
    "section": "",
    "text": "As a part of Quarto, we’ve developed a simple single file format that describes declarations, variables, and rules that should be layered into Scss files when compiling them into css. The basic structure of a theme file is:\nHere is an example file:"
  },
  {
    "objectID": "docs/output-formats/html-themes-more.html#bootswatch-sass-theme-files",
    "href": "docs/output-formats/html-themes-more.html#bootswatch-sass-theme-files",
    "title": "More About Quarto Themes",
    "section": "Bootswatch Sass Theme Files",
    "text": "Bootswatch Sass Theme Files\nWe’ve merged Bootswatch themes for Bootstrap 5 into this single file theme format in our repo here:\nhttps://github.com/quarto-dev/quarto-cli/tree/main/src/resources/formats/html/bootstrap/themes\nFrom time to time, as the Bootswatch themes are updated, we will update these merged theme files."
  },
  {
    "objectID": "docs/output-formats/html-themes-more.html#bootstrap-bootswatch-layering",
    "href": "docs/output-formats/html-themes-more.html#bootstrap-bootswatch-layering",
    "title": "More About Quarto Themes",
    "section": "Bootstrap / Bootswatch Layering",
    "text": "Bootstrap / Bootswatch Layering\nWhen using the Quarto HTML format, we allow the user to specify theme information in the document front matter (or project YAML). The theme information consists of a list of one or more of\n\nA valid built in Bootswatch theme name\nA theme file (valid as described above).\n\nFor example the following would use the cosmo Bootswatch theme and provide customization using the custom.scss file:\ntheme:\n  - cosmo\n  - custom.scss\nWhen compiling the CSS for a Quarto website or HTML page, we merge any user provided theme file(s) or Bootswatch themes with the Bootstrap Scss in the following layers:\nUses\n    Bootstrap\n    Theme(s)       /*-- scss:uses --*/\n    \nFunctions\n    Bootstrap\n    Theme(s)       /*-- scss:functions --*/\n\nVariables\n    Themes(s)      /*-- scss:defaults --*/\n    Bootstrap\n    \nMixins                 \n    Bootstrap\n    Theme(s)       /* -- scss:mixins --*/\n\nRules\n    Bootstrap\n    Theme(s)       /*-- scss:rules --*/\nWe order the themes according to the order that they are specified in the YAML, maintaining the order for declarations and rules and reversing the order for variables (allowing the files specified later in the list to provide defaults variable values to the files specified earlier in the list). Layering of the example themes above would be as follows:\nUses\n    Bootstrap\n    cosmo           /*-- scss:uses --*/\n    custom.scss     /*-- scss:uses --*/\n\nFunctions\n    Bootstrap\n    cosmo           /*-- scss:functions --*/\n    custom.scss     /*-- scss:functions --*/\n\nVariables\n    custom.scss     /*-- scss:defaults --*/\n    cosmo           /*-- scss:defaults --*/\n    Bootstrap\n\nMixins\n    Bootstrap\n    cosmo            /* -- scss:mixins --*/\n    custom.scss      /* -- scss:mixins --*/\n\nRules\n    Bootstrap\n    cosmo           /*-- scss:rules --*/\n    custom.scss     /*-- scss:rules --*/"
  },
  {
    "objectID": "docs/output-formats/page-layout.html",
    "href": "docs/output-formats/page-layout.html",
    "title": "Page Layout",
    "section": "",
    "text": "Quarto provides a default layout for HTML pages that should work well for many documents. However, if the default layout isn’t working for your content, you can adjust it.\nOn this page, learn about:\n\nThe three high level layout options for your pages in Page Layout.\nHow to adjust the width of the individual layout components (sidebar, body, margins, and gutter) to fit your content in Grid Customization."
  },
  {
    "objectID": "docs/output-formats/page-layout.html#overview",
    "href": "docs/output-formats/page-layout.html#overview",
    "title": "Page Layout",
    "section": "",
    "text": "Quarto provides a default layout for HTML pages that should work well for many documents. However, if the default layout isn’t working for your content, you can adjust it.\nOn this page, learn about:\n\nThe three high level layout options for your pages in Page Layout.\nHow to adjust the width of the individual layout components (sidebar, body, margins, and gutter) to fit your content in Grid Customization."
  },
  {
    "objectID": "docs/output-formats/page-layout.html#page-layout",
    "href": "docs/output-formats/page-layout.html#page-layout",
    "title": "Page Layout",
    "section": "Page Layout",
    "text": "Page Layout\nBy default Quarto HTML documents display content centered at a width optimized for readability (typically from 600px to 900px wide). While this is a sound default layout for traditional articles, for other types of pages (e.g. landing or index pages) you may want to use other layouts.\nThe page-layout option can be use to control the layout used. For example:\nformat: \n  html:\n    page-layout: full\nThe various page-layout options are described below.\n\nArticle\npage-layout: article\nArticle layout provides a content area with a page based grid layout that provides margins, areas for sidebars, and a reading width optimized body region. The precise size of the document regions will vary slightly depending upon the sidebar (if present) and the presence or absence of margin or complex layout elements. To learn more, checkout the guide to Article Layout.\n\n\nFull\npage-layout: full\nFull layout uses the article grid system, but automatically expands the content area to use the sidebar and margin region if no content is placed within those regions. This is useful for layouts that don’t need to be constrained to reading width and that will benefit from additional horizontal space (e.g. landing or index pages)\n\n\nCustom\npage-layout: custom\nCustom layout provides a simple HTML content container with no default grid system, padding, or margins. The default HTML framing provided will look this this:\n&lt;div class=\"page-layout-custom\"&gt;\n  &lt;!-- body content here --&gt;\n&lt;/div&gt;\nIn websites, custom layouts do not include navigation sidebars but do include the site navbar and footer.\n\nCSS Grid\nIf you are using page-layout: custom, you’ll likely want to utilize the Bootstrap CSS Grid layout system (which is available by default in Quarto documents) for creating more sophisticated layouts.\nFor example, here’s a simple 2-column grid:\n::: {.grid}\n\n::: {.g-col-4}\nThis column takes 1/3 of the page\n:::\n\n::: {.g-col-8}\nThis column takes 2/3 of the page\n:::\n\n:::\nBootstrap’s CSS Grid system includes facilities for responsiveness, wrapping, nesting, and fine grained customization of column behavior.\nNote that this isn’t the traditional Bootstrap grid used in older versions of Bootstrap – rather, it’s a brand new layout system introduced in Bootstrap 5.1 based on the CSS Grid standard. Quarto uses this newer system because it has more sophisticated layout capabilities akin to what LaTeX offers for print documents.\nSee the Bootstrap CSS Grid documentation for additionals details."
  },
  {
    "objectID": "docs/output-formats/page-layout.html#grid-customization",
    "href": "docs/output-formats/page-layout.html#grid-customization",
    "title": "Page Layout",
    "section": "Grid Customization",
    "text": "Grid Customization\n\n\n\n\n\n\nQuarto 1.3 Feature\n\n\n\nThis feature is new in Quarto 1.3, which you can download at https://quarto.org/docs/download/\n\n\nYou can control the width of the layout components in HTML documents with YAML options and SCSS. For example, if long entries in a sidebar are being wrapped, it may make sense to increase the width of sidebar:\n\n\n\n\n\n\nDefault Layout\n\n\n\n\n\n\n\nWider Sidebar\n\n\n\n\n\nThis change can be made by adding the grid option to the _quarto.yml file, increasing the sidebar-width from its default of 250px:\n\n\n_quarto.yml\n\nformat:\n  html:\n    grid:\n      sidebar-width: 350px\n\nThere are four variables to control the four components of the layout: the sidebar, the body, the margin, and the gutters.\nThe rest of this section describes these components, and their default values, as well as how to customize them either with YAML or SCSS variables. You can also find Additional Examples of customization in action.\n\nHTML Page Layout\nQuarto HTML documents are arranged in a structure composed of a sidebar on the left, the body of the document, the margin of the document on the right, and the space between these elements, known as gutters. This is illustrated below:\n\nThe width of these four components is controlled by four variables. These variables, along with their default values are:\n\n\nDefault values for the width of layout components\n\n\nElement\nSize\n\n\n\n\nsidebar-width\n250px\n\n\nbody-width\n800px\n\n\nmargin-width\n250px\n\n\ngutter-width\n1.5em\n\n\n\n\nThe values of these variables don’t directly specify the display width of the corresponding component, instead they specify a maximum base value. The maximum values are scaled to create minimum values, and together they are used to compute the size and position of each component across different layout types (fixed vs. floating), responsive sizes (large screen vs. mobile size), and page contents (margin vs. no margin content).\n\n\nCustomizing Component Widths\nYou can control the component width variables using YAML or SCSS variables. To set these options in YAML, you may use the grid option :\n\n\n_quarto.yml\n\nformat:\n  html: \n    grid:\n      sidebar-width: 300px\n      body-width: 900px\n      margin-width: 300px\n      gutter-width: 1.5rem\n\n\n\n\n\n\n\nWebsites vs. Standalone HTML Pages\n\n\n\nCustomizing the layout of pages that are part of a Quarto website with YAML should happen at the site level in _quarto.yml. For HTML documents that aren’t part of a website, these options could also be set in the YAML at the top of the document.\n\n\nSimilarly, in a custom theme scss file, you may set variables like:\n// The left hand sidebar\n$grid-sidebar-width: 300px !default;\n\n// The main body\n$grid-body-width: 900px !default;\n\n// The right hand margin bar\n$grid-margin-width: 300px !default;\n\n// The gutter that appears between the above columns\n$grid-column-gutter-width: 1.5rem !default;\nsidebar-width, body-width, and margin-width should be specified in pixels (px) as the values will be used when computing other sizes. Requiring pixel sizing is a limitation of our approach to the Quarto’s layout, but also typically makes sense since the overall document width is usually tied to the browser size and responsive breakpoints rather than font size or other relative measures.\ngutter-width may be specified in pixels or other units such as em or rem which are responsive to the document font size.\n\n\nAdditional Examples\nIncreasing the margin width may make sense on a website that has many figures or tables in the margin. For example, this YAML increases the margin-width by 200px over the default value:\nformat:\n  html:\n    grid:\n      margin-width: 450px\n\n\n\n\n\n\nDefault Layout\n\n\n\n\n\n\n\nWider Margin\n\n\n\n\n\nThe effect of changing margin-width without changing body-width is to increase the overall page width (there is less white space on the far left and right of the page). Alternatively, to keep the overall page width the same body-width can be decreased by the same amount as margin-width increased:\nformat:\n  html:\n    grid:\n      margin-width: 450px\n      body-width: 600px\n\n\n\n\n\n\nDefault Layout\n\n\n\n\n\n\n\nWider Margin, Narrower Body"
  }
]