---
title: Creating an Extension
draft: true
---

For an overview of Quarto extensions, see [the overview](index.qmd) of Quarto Extensions.

## Extension Structure

Quarto extensions are conceptually very simple though powerful. An extension is a bundle of metadata and resources that is made available to Quarto during the rendering of a document. When the user of the extension refers to the extension (for example by using a shortcode, by placing the extension name in a list of filters, or by using the extension format name as a render target), the contributions of the extension are merged into the render pipeline as appropriate.

Extensions are structured on the file system as follows:

``` {.bash filename="Terminal"}
# Extension root folder
_extensions/<organization-name>/<extension-name>/

# Extension YAML file
_extensions/<organization-name>/<extension-name>/_extension.yml

# Other resources
_extensions/<organization-name>/<extension-name>/*
```

The `_extension.yml` file provides the metadata and configuration of the extension.

Extensions can be hosted and distributed as tarballs via URL, but the easiest way to distribute and host them is to use Github. When distributing extensions with Github, the `organization-name` above corresponds to the Github organization name and the `extension-name` corresponds to the repo name. For example, for the repo:

`https://github.com/quarto-ext/fontawesome`

The extension folder is

``` {.bash filename="Terminal"}
# The extension root folder
_extensions/quarto-ext/fontawesome/
```

and the command to add, update, or remove this extension is:

``` {.bash filename="Terminal"}
quarto add quarto-ext/fontawesome
quarto update quarto-ext/fontawesome
quarto remove quarto-ext/fontawesome
```

## Extension Metadata

Each extension is defined by its `_extension.yml` file which contains the metadata about the extension as well as the what items it contributes when used. At the root level, specify the following information in the `_extension.yml` file:

`title`

:   The extension's name

`author`

:   The author of the extension

`version`

:   A semantic version number this release. When installing, updating, or releasing an extension, this version number will be used to present a summary of actions to the user.

`quarto-required`

:   A semantic version number indicating the minimum version of quarto required to run this extension.

`contributes`

:   The items that this extension will contribute to the render. There are three allowed subkeys:

::: {style="margin-left: 1em;"}

`shortcodes`

:   A list of shortcode files that should be loaded when this extension is installed.

`filters`

:   A list of filters that should be loaded when this extension is included in the list of filters used to render a document or project. The order of the filters in this list will be preserved.

`formats`:

:   A record containing the key value pairs of output formats and the metadata associated with that output format.
:::

## Filter Extensions

For example, a simple filter extension looks like:

``` yaml
title: My Filter Extension
author: Norah Jones
version: 0.0.1
contributes:
  filters:
    - extension.lua
```

For more information about authoring filters, see [Pandoc Filters](https://quarto.org/docs/authoring/filters.html#pandoc-filters).

## Shortcode Extensions

A simple shortcode filter extension looks like:

``` yaml
title: My Filter Extension
author: Norah Jones
version: 0.0.1
contributes:
  shortcodes:
    - shortcode.lua
```

For more information about authoring shortcodes, see [Shortcodes](https://quarto.org/docs/authoring/shortcodes.html).

## Format Extensions

And a simple format extension looks like:

``` yaml
title: My Filter Extension
author: Norah Jones
version: 0.0.1
contributes:
  formats:
    pdf:
      keep-tex: true
      pdf-engine: lualatex
      cite-method: natbib
    html:
      css: my-style.css
    
```

Format extensions permit you to combine metadata and resources to provide specific behavior when rendering specific output formats. For example, if you'd like to create LaTeX and PDF output targeting a specific academic journal, you could create a format that provides the proper Quarto metadata as well as referenced LaTeX class files and bibliography styles. That metadata will be activated when the user renders a document targeting the extension format, by doing:

`quarto render my-article.qmd â€“to <extension>-pdf`

### Common Metadata

If you have metadata that is common to any output format when your format extension is targeted, you can place that metadata under the `common` key. For example:

``` yaml
contributes:
  format:
    common:
      filters:
        - filter.lua
      shortcodes:
        - quarto-ext/fancy-text
```

### Resources

You can easily include other files and resources within a format extension by placing those files within the extension directory and using relative paths to reference them. These relative paths will be properly handled.

If there are resources that you need to have copied to the input directory as a part of rendering the document (for example, a `bst` file for LaTeX bibliographies or a logo file), you can provide `format-resources`, which is a list of file paths. Each of these files will be copied into the directory containing the input that is being rendered when the document is rendered.

### Embedding Other Extensions in a Format Extension

It is often convenient to include the functionality from an extension in another extension, particularly for format extensions which might embed shortcodes or filters from another extension. This is allowed, but installing extensions into another extension must be done with a special syntax to embed them in the extension.

For example, running the following command from the the directory which contains your `_extensions` directory:

``` {.bash filename="Terminal"}
$ quarto add quarto-ext/fancy-text --embed quarto-journals/jss
```

Will add the `quarto-ext/fancy-text` extension into the `quarto-journals/jss` extension in the `_extensions` folder. Once you have added the embedded extension, you can simply refer to it using its name under the `filters` or `shortcodes` keys in the relevant formats.

### Complete Example YML

``` yml
title: Journal of Statistical Software Format
author: Charles Teague
version: 0.9.2
contributes:
  format:
    common:
      filters:
        - filter.lua
      shortcodes:
        - quarto-ext/fancy-text
      knitr:
        opts_chunk:
          R.options:
            prompt: "R> "
            continue: "+"
    pdf:
      shift-heading-level-by: -1
      tbl-cap-location: bottom
      highlight-style: none
      include-in-header:
        text: |
          \usepackage{orcidlink,thumbpdf,lmodern}

          \newcommand{\class}[1]{`\code{#1}'}
          \newcommand{\fct}[1]{\code{#1()}}
      fig-width: 4.9 # 6.125" * 0.8, as in template
      fig-height: 3.675 # 4.9 * 3:4
      template-partials:
        - "partials/doc-class.tex"
        - "partials/title.tex"
        - "partials/before-body.tex"
        - "partials/_print-address.tex"
        - "partials/_print-author.tex"
      cite-method: natbib
      biblio-config: false
      format-resources:
        - jss.bst
        - jss.cls
        - jsslogo.jpg
    html:
      number-sections: true
      toc: true
```

The above could be rendered using:

``` {.bash filename="Terminal"}
$ quarto render my-article.qmd --to jss-pdf
```

Note that the command

``` {.bash filename="Terminal"}
$ quarto render my-article.qmd --to pdf
```

Would render a simple pdf. Since the extension name prefix is omitted, none of the extensions `pdf` or `common` metadata is merged into the document metadata when rendering.
