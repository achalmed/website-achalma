---
title: Hugo
format-name: hugo
ssg-name: Hugo
ssg-description: |
  [Hugo](https://gohugo.io/) is a very popular open source website publishing system
ssg-preview: hugo serve
ssg-build: hugo
---

{{< include _ssg-intro.qmd >}}

## Site Config

There are a couple of changes you should make to your Hugo `config.toml` in preparation for using Quarto with Hugo. First, make sure that `.qmd` and `.ipynb` files and other source code or data files are not published as part of the site. For example:

``` toml
ignoreFiles = [ "\\.qmd$", "\\.ipynb$", "\\.py$" ]
```

Next, configure Hugo's markdown renderer to allow raw HTML (as many R and Python packages will produce computational output using raw HTML rather than markdown):

``` toml
[markup.goldmark.renderer]
unsafe= true
```

## Creating a Page

Hugo articles and posts that use Quarto should live in their own directory (taking advantage of the Hugo [Page Bundles](https://gohugo.io/content-management/page-bundles/) feature). This allows any content generated/referenced by the page (e.g. plot output) to live right alongside the markdown source.

To add Quarto documents to a Hugo site:

1.  Create a directory within `content` that will hold your Quarto article.

2.  Add an `index.qmd` document to the directory. When rendered this will create an `index.md`, which in turn will ensure that Hugo treats it as a [Page Bundle](https://gohugo.io/content-management/page-bundles/) (automatically copying images and other referenced resources to the publish directory).

3.  Add the requisite Hugo [front matter](https://gohugo.io/content-management/front-matter/), then also specify `format: hugo-md` and any other required Quarto options.

For example, let's say we wanted to create a new article named `hello-quarto` within the `content` directory. The filesystem would look like this:

``` ini
mysite/
  content/
    hello-quarto/
      index.qmd
```

Here's what the source code of `index.qmd` might look like:

    ---
    title: Hello, Quarto
    date: "2012-04-06"
    categories: 
      - Matplotlib
      - Coordinates
    format: hugo-md
    jupyter: python3
    ---

    ## Polar Axis

    For a demonstration of a line plot on a polar axis, see @fig-polar.

    ```{{python}}
    #| label: fig-polar
    #| fig-cap: "A line plot on a polar axis"

    import numpy as np
    import matplotlib.pyplot as plt

    r = np.arange(0, 2, 0.01)
    theta = 2 * np.pi * r
    fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
    ax.plot(theta, r)
    ax.set_rticks([0.5, 1, 1.5, 2])
    ax.grid(True)
    plt.show()
    ```

{{< include _ssg-workflow.qmd >}}


## Shortcodes

Note that Hugo [shortcodes](https://gohugo.io/content-management/shortcodes/) and Quarto [shortcodes](../extensions/shortcodes.qmd) share the same basic syntax (e.g. `{{{< var foo >}}}`). This is normally not a problem as shortcodes not recognized by Quarto are passed through unmodified to Hugo.

However, in some cases the use of a Hugo shortcode throws off Pandoc markdown processing, and its necessary to "protect" the Hugo shortcode from processing by Pandoc. This can typically be handled by escaping the shortcode with an extra brace. For example:

``` default
{{{{< ref "foo/index.md" >}}}}
```

It's possible that this won't be enough if the presence of the shortcode changes how Pandoc processes the surrounding markdown (e.g. this is currently known to occur for links). In this case you need to use a markdown raw block around the entire construct. For example:

```` default
```{=markdown}
[click here]({{< ref "foo/index.md" >}})
```
````

Or for inline content, use a markdown raw inline:

``` default
For more info, `[click here]({{< ref "foo/index.md" >}})`{=markdown}
```

{{< include _webtex.md >}}


